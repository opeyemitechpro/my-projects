{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start Here","text":"Opeyemi Okuboyejo DevOps &amp; Cloud EngineerCertified Cloud Solutions ArchitectSystems Administrator || IT Support Engineer"},{"location":"#welcome-to-opeyemitechpro-projects-portfolio","title":"Welcome to OpeyemiTechPro Projects Portfolio.","text":"<p>Welcome to My Cloud Engineering &amp; DevOps Project Hub!</p> <p>I'm excited to share my passion for Cloud Engineering and DevOps with you through this website. As a dedicated enthusiast in this field, I've created a collection of projects that showcase my skills and experiences. This website serves as a project portfolio, where I'll share step-by-step documentation for each project, including successes, challenges, and lessons learned.</p> <p>Here, you'll find a wide range of projects, from cloud infrastructure setups to DevOps automation, and everything in between. My goal is to provide a valuable resource for others who share my interests and to inspire collaboration and knowledge-sharing within the community.</p> <p>Whether you're a fellow Cloud Engineering and DevOps enthusiast, a student looking to learn, or simply curious about the field, I invite you to explore my projects, ask questions, and join the conversation.</p> <p>What you can expect from this website:</p> <ul> <li>Step-by-step documentation for each project</li> <li>Insights into my thought process, design decisions, and problem-solving approaches</li> <li>A showcase of my skills and experiences in Cloud Engineering and DevOps</li> <li>A platform for discussion, feedback, and collaboration</li> <li>Regular updates with new projects and experiences</li> </ul> <p>Thank you for visiting, and I look forward to sharing my passion with you!</p>"},{"location":"#opeyemi-okuboyejo","title":"Opeyemi Okuboyejo","text":""},{"location":"#opeyemitechpro","title":"OpeyemiTechPro","text":""},{"location":"#httpsopeyemitechprogithubio","title":"https://opeyemitechpro.github.io","text":"<p>Follow Me</p> <p> </p> <p> </p>"},{"location":"#github-stats","title":"GitHub Stats","text":""},{"location":"contact-me/","title":"Contact Me","text":"<p>Loading\u2026</p>"},{"location":"draft/","title":"This is a Draft for reference MkDocs","text":"<p>This page was Created: 2024-08-16</p> <p>This page was last updated: 2025-06-12</p> <p></p> <p>Hello, I'm Opeyemi Okuboyejo </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p></p> <p></p> <p></p> Opeyemi Okuboyejo"},{"location":"draft/#markdown-basic-syntax","title":"MarkDown Basic Syntax","text":"<p>MarkDown Basic Syntax</p>"},{"location":"draft/#image-handling","title":"Image Handling","text":"Watch this YouTube Video <p>Nice Video</p>"},{"location":"draft/#embed-a-youtube-video-on-page","title":"Embed a YouTube Video on page","text":""},{"location":"draft/#this-is-image-positioning","title":"This is image positioning","text":"Centred image with caption and alt text <p> Opeyemi Okuboyejo </p> Centred image with caption and alt text <p> Profile Image Caption </p> Clickable Centred image with caption and alt text <p> Profile Image Caption </p> <p></p> <p></p> Image caption <p></p> Image 2 caption <p></p>"},{"location":"draft/#usage","title":"Usage","text":""},{"location":"draft/#image-alignment","title":"Image alignment","text":"<p>When Attribute Lists is enabled, images can be aligned by adding the respective alignment directions via the <code>align</code> attribute, i.e. <code>align=left</code> or <code>align=right</code>:</p> LeftRight Image, aligned to left<pre><code>![Image title](https://dummyimage.com/600x400){ align=left }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Image, aligned to right<pre><code>![Image title](https://dummyimage.com/600x400){ align=right }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports.</p> Why is there no centered alignment? <p>The <code>align</code> attribute doesn't allow for centered alignment, which is why this option is not supported by Material for MkDocs.<sup>1</sup> Instead, the image captions syntax can be used, as captions are optional.</p>"},{"location":"draft/#image-captions","title":"Image captions","text":"<p>Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to use the [Markdown in HTML] extension with literal <code>figure</code> and <code>figcaption</code> tags:</p> Image with caption<pre><code>&lt;figure markdown=\"span\"&gt;\n  ![Image title](https://dummyimage.com/600x400){ width=\"300\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> Image caption"},{"location":"draft/#image-lazy-loading","title":"Image lazy-loading","text":"<p>Modern browsers provide native support for lazy-loading images through the <code>loading=lazy</code> directive, which degrades to eager-loading in browsers without support:</p> Image, lazy-loaded<pre><code>![Image title](https://dummyimage.com/600x400/){ loading=lazy }\n</code></pre> <p></p> <p>Warning</p> <p>This is a warning block</p> Warning <p>This is a warning block expanded by default</p> <p>Attention</p> <p>This is an attention block</p> <p>Info</p> <p>This is an attention block</p> <p>Console</p> <p>This is an attention block</p> <p>Integrate with site navigation</p> <p>Add the following to your <code>mkdocs.yml</code> to see how the Blog plugin can integrate the blog navigation with the overall navigation structure. Note that the only thing you need to specify at this point is the index page for the blog and its path must match the <code>blog_dir</code> setting, which is <code>blog</code> by default:</p> <pre><code>nav:\n  - Home: index.md\n  - Install: install.md\n  - Usage: usage.md\n  - Blog:\n     - blog/index.md\n</code></pre> <p>You will notice that \"Blog\" is duplicated in the navigation structure. To avoid this, you can use the <code>navigation.indexes</code> feature to make the blog index the seciton index page for the blog:</p> <pre><code>theme:\n  name: material\n  features:\n    - navigation.indexes\n</code></pre> <p>Stand-alone blog</p> <p>If what you need is a stand-alone blog instead of one that is integrated with a larger site, this can be done by using the <code>blog_dir</code> configuration option. To see how this is done, see setting up a blog. The rest of the tutorial assumes that you are integrating the blog with a wider site.</p> <p>Adding pages</p> <p>You can add additional pages to the blog section by putting them into <code>docs/blog</code> (and adding them to the navigation). The blog archive will be added to the navigation after these pages.</p> How to visualize the collected feedback ratings? <p>To visualize feedback ratings you'll need to create a custom report with [Google Analytics] that will quickly show you the worst- and best-rated pages of your project documentation.</p> <ol> <li> <p>Go to your Google Analytics dashboard</p> </li> <li> <p>Go to the configure page on the left hand menu, then select     custom definitions</p> </li> <li> <p>Click the custom metrics tab and then create custom metrics,     enter the following values:</p> <ul> <li>Metric name: Page helpful</li> <li>Description: Was this page helpful?</li> <li>Event parameter: <code>data</code></li> <li>Unit of measurement: Standard</li> </ul> </li> <li> <p>Go to the explore page on the left hand menu, create a new     blank exploration</p> </li> <li> <p>Configure the report as follows:</p> <ul> <li>Dimensions: Add <code>Event name</code> and <code>Page location</code></li> <li>Metrics: Add <code>Event count</code> and <code>Page helpful</code>   (the custom metric created in step 3)</li> <li>Rows: <code>Page location</code></li> <li>Values: Drag in both <code>Event count</code> and <code>Page helpful</code></li> <li>Filters: Add a new filter for   <code>Event name / exactly matches / feedback</code></li> </ul> </li> </ol> <p>Delay in data availability</p> <p>The report may take 24 hours or longer to begin displaying data</p> <p>Now, after you've saved the report and collected some feedback ratings, you'll have a list of all pages with the total number of ratings, and an average rating per page. This should help you identify pages that need to be improved:</p> <p>Google Analytics 4 does not support average values</p> <p>To our knowledge, Google Analytics 4 has currently no feature that allows to define a custom calculated metric to compute the average rating of a page. See #5740.</p> <p>[![feedback report]][feedback report]</p>"},{"location":"draft/#getting-started","title":"Getting started","text":"<p>Material for MkDocs is a powerful documentation framework on top of MkDocs, a static site generator for project documentation.<sup>1</sup> If you're familiar with Python, you can install Material for MkDocs with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p>"},{"location":"draft/#installation","title":"Installation","text":""},{"location":"draft/#with-pip","title":"with pip recommended","text":"<p>Material for MkDocs is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Material for MkDocs with:</p> Latest9.x <pre><code>pip install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-material==\"9.*\" # (1)!\n</code></pre> <ol> <li> <p>Material for MkDocs uses semantic versioning<sup>2</sup>, which is why it's a     good idea to limit upgrades to the current major version.</p> <p>This will make sure that you don't accidentally upgrade to the next major version, which may include breaking changes that silently corrupt your site. Additionally, you can use <code>pip freeze</code> to create a lockfile, so builds are reproducible at all times:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Now, the lockfile can be used for installation:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions. Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.</p> <p> How to set up Material for MkDocs by @james-willett \u2013  15m \u2013 Learn how to create and host a documentation site using Material for MkDocs on GitHub Pages in a step-by-step guide.</p> <p>Tip</p> <p>If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"draft/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> Latest9.x <pre><code>docker pull squidfunk/mkdocs-material\n</code></pre> <pre><code>docker pull squidfunk/mkdocs-material:9\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entry point and <code>serve</code> is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections.</p> <p>The following plugins are bundled with the Docker image:</p> <ul> <li>mkdocs-minify-plugin</li> <li>mkdocs-redirects</li> </ul> Green Bar colapsed <p>this is sample text</p> How to add plugins to the Docker image? <p>Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, you can add them easily:</p> Material for MkDocsInsiders <p>Create a <code>Dockerfile</code> and extend the official image:</p> Dockerfile<pre><code>FROM squidfunk/mkdocs-material\nRUN pip install mkdocs-macros-plugin\nRUN pip install mkdocs-glightbox\n</code></pre> <p>Clone or fork the Insiders repository, and create a file called <code>user-requirements.txt</code> in the root of the repository. Then, add the plugins that should be installed to the file, e.g.:</p> user-requirements.txt<pre><code>mkdocs-macros-plugin\nmkdocs-glightbox\n</code></pre> <p>Next, build the image with the following command:</p> <pre><code>docker build -t squidfunk/mkdocs-material .\n</code></pre> <p>The new image will have additional packages installed and can be used exactly like the official image.</p>"},{"location":"draft/#with-git","title":"with git","text":"<p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>Next, install the theme and its dependencies with:</p> <pre><code>pip install -e mkdocs-material\n</code></pre>"},{"location":"draft/#icon-simpleterraform","title":"icon: simple/terraform","text":""},{"location":"draft/#terraform-page","title":"Terraform Page","text":""},{"location":"draft/#terraform-aws","title":"Terraform AWS","text":"<pre><code>resource \"aws_instance\" \"Server\" {\n  ami           = \"ami-0b8b44ec9a8f90422\"\n  instance_type = var.instance_type\n\n  # key_name = \"OpeyemiTechPro-KeyPair.ppk\"\nuser_data = file(\"./userdata.sh\")\n\n  key_name = var.key_pair_name\n\n  tags = {\n    Name = \"Server\"\n  }\n}\n</code></pre> <p>This is page 2 contents</p> <p>This is an annotation (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"draft/#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"draft/#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"draft/#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"draft/#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"draft/#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"draft/#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"draft/#annotated-text","title":"Annotated Text","text":"<p>This is annotated text (1) Click the annotation to see more details { .annotate} 1.  ### This text has been annotated as you can see 2.  This is line 2 of the annotation <code>def myfunction()</code> 3.    ``` tf resource \"aws_instance\" \"Server\" {   ami           = \"ami-0b8b44ec9a8f90422\"   instance_type = var.instance_type</p> <p># key_name = \"OpeyemiTechPro-KeyPair.ppk\" user_data = file(\"./userdata.sh\")</p> <p>key_name = var.key_pair_name</p> <p>tags = {     Name = \"Server\"   } } <pre><code>#### Highlighting lines\n\n``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p>"},{"location":"draft/#icons-and-emojis","title":"Icons and Emojis","text":""},{"location":"draft/#icon-materialbutton-cursor","title":"icon: material/button-cursor","text":""},{"location":"draft/#buttons","title":"Buttons","text":"<p>Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, <code>label</code> or <code>button</code> element. This is especially useful for documents or landing pages with dedicated call-to-actions.</p>"},{"location":"draft/#configuration","title":"Configuration","text":"<p>This configuration allows to add attributes to all inline- and block-level elements with a simple syntax, turning any link into a button. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> </ul>"},{"location":"draft/#usage_1","title":"Usage","text":""},{"location":"draft/#adding-buttons","title":"Adding buttons","text":"<p>In order to render a link as a button, suffix it with curly braces and add the <code>.md-button</code> class selector to it. The button will receive the selected primary color and accent color if active.</p> Button<pre><code>[Subscribe to our newsletter](#){ .md-button }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"draft/#adding-primary-buttons","title":"Adding primary buttons","text":"<p>If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the <code>.md-button</code> and <code>.md-button--primary</code> CSS class selectors.</p> Button, primary<pre><code>[Subscribe to our newsletter](#){ .md-button .md-button--primary }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"draft/#adding-icon-buttons","title":"Adding icon buttons","text":"<p>Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search.</p> Button with icon<pre><code>[Send :fontawesome-solid-paper-plane:](#){ .md-button }\n</code></pre> <p>Send </p>"},{"location":"draft/#icon-simpleamazonwebservices","title":"icon: simple/amazonwebservices","text":""},{"location":"draft/#aws-projects","title":"AWS Projects","text":"<p>Warning</p> <p>This is a warning block</p> <p>Attention</p> <p>This is an attention block</p> <p>Integrate with site navigation</p> <p>Add the following to your <code>mkdocs.yml</code> to see how the Blog plugin can integrate the blog navigation with the overall navigation structure. Note that the only thing you need to specify at this point is the index page for the blog and its path must match the <code>blog_dir</code> setting, which is <code>blog</code> by default:</p> <pre><code>nav:\n  - Home: index.md\n  - Install: install.md\n  - Usage: usage.md\n  - Blog:\n     - blog/index.md\n</code></pre> <p>You will notice that \"Blog\" is duplicated in the navigation structure. To avoid this, you can use the <code>navigation.indexes</code> feature to make the blog index the seciton index page for the blog:</p> <pre><code>theme:\n  name: material\n  features:\n    - navigation.indexes\n</code></pre> <p>Stand-alone blog</p> <p>If what you need is a stand-alone blog instead of one that is integrated with a larger site, this can be done by using the <code>blog_dir</code> configuration option. To see how this is done, see setting up a blog. The rest of the tutorial assumes that you are integrating the blog with a wider site.</p> <p>Adding pages</p> <p>You can add additional pages to the blog section by putting them into <code>docs/blog</code> (and adding them to the navigation). The blog archive will be added to the navigation after these pages.  </p>"},{"location":"draft/#changing-the-colors","title":"Changing the colors","text":"<p>As any proper Material Design implementation, Material for MkDocs supports Google's original color palette, which can be easily configured through <code>mkdocs.yml</code>. Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables.</p>"},{"location":"draft/#configuration_1","title":"Configuration","text":""},{"location":"draft/#color-palette","title":"Color palette","text":""},{"location":"draft/#color-scheme","title":"Color scheme","text":"<p>Material for MkDocs supports two color schemes: a light mode, which is just called <code>default</code>, and a dark mode, which is called <code>slate</code>. The color scheme can be set via <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n    scheme: default\n</code></pre> <p>Click on a tile to change the color scheme:</p> <code>default</code> <code>slate</code>"},{"location":"draft/#primary-color","title":"Primary color","text":"<p>The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in <code>mkdocs.yml</code> to a valid color name:</p> <pre><code>theme:\n  palette:\n    primary: indigo\n</code></pre> <p>Click on a tile to change the primary color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <code>brown</code> <code>grey</code> <code>blue grey</code> <code>black</code> <code>white</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"draft/#accent-color","title":"Accent color","text":"<p>The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in <code>mkdocs.yml</code> by choosing a valid color name:</p> <pre><code>theme:\n  palette:\n    accent: indigo\n</code></pre> <p>Click on a tile to change the accent color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"draft/#color-palette-toggle","title":"Color palette toggle","text":"<p>Offering a light and dark color palette makes your documentation pleasant to read at different times of the day, so the user can choose accordingly. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette: # (1)!\n\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 # (2)!\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <ol> <li> <p>Note that the <code>theme.palette</code> setting is now defined as a list.</p> </li> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This configuration will render a color palette toggle next to the search bar. Note that you can also define separate settings for <code>primary</code> and <code>accent</code> per color palette.</p> <p>The following properties must be set for each toggle:</p> <p>  This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations:</p> <ul> <li> +  \u2013 <code>material/brightness-7</code> + <code>material/brightness-4</code></li> <li> +  \u2013 <code>material/toggle-switch</code> + <code>material/toggle-switch-off-outline</code></li> <li> +  \u2013 <code>material/weather-night</code> + <code>material/weather-sunny</code></li> <li> +  \u2013 <code>material/eye</code> + <code>material/eye-outline</code></li> <li> +  \u2013 <code>material/lightbulb</code> + <code>material/lightbulb-outline</code></li> </ul> <p>  This property is used as the toggle's <code>title</code> attribute and should be set to a discernable name to improve accessibility. It's rendered as a tooltip.</p>"},{"location":"draft/#system-preference","title":"System preference","text":"<p>Each color palette can be linked to the user's system preference for light and dark appearance by using a media query. Simply add a <code>media</code> property next to the <code>scheme</code> definition in <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <p>When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.</p>"},{"location":"draft/#automatic-light-dark-mode","title":"Automatic light / dark mode","text":"<p>Newer operating systems allow to automatically switch between light and dark appearance during day and night times. Material for MkDocs adds support for automatic light / dark mode, delegating color palette selection to the user's operating system. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default # (1)!\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n</code></pre> <ol> <li>You can also define separate settings for <code>primary</code> and     <code>accent</code> per color palette, i.e. different colors for     light and dark mode.</li> </ol> <p>Material for MkDocs will now change the color palette each time the operating system switches between light and dark appearance, even when the user doesn't reload the site.</p>"},{"location":"draft/#customization","title":"Customization","text":""},{"location":"draft/#custom-colors","title":"Custom colors","text":"<p>Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables.</p> <p>First, set the <code>primary</code> or <code>accent</code> values in <code>mkdocs.yml</code> to <code>custom</code>, to signal to the theme that you want to define custom colors, e.g., when you want to override the <code>primary</code> color:</p> <pre><code>theme:\n  palette:\n    primary: custom\n</code></pre> <p>Let's say you're  YouTube, and want to set the primary color to your brand's palette. Just add:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>See the file containing the color definitions for a list of all CSS variables.</p>"},{"location":"draft/#custom-color-schemes","title":"Custom color schemes","text":"<p>Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a <code>[data-md-color-scheme=\"...\"]</code> attribute selector, which you can then set via <code>mkdocs.yml</code> as described in the color schemes section:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>[data-md-color-scheme=\"youtube\"] {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>theme:\n  palette:\n    scheme: youtube\nextra_css:\n  - stylesheets/extra.css\n</code></pre> <p>Additionally, the <code>slate</code> color scheme defines all of it's colors via <code>hsla</code> color functions and deduces its colors from the <code>--md-hue</code> CSS variable. You can tune the <code>slate</code> theme with:</p> <pre><code>[data-md-color-scheme=\"slate\"] {\n  --md-hue: 210; /* (1)! */\n}\n</code></pre> <ol> <li>The <code>hue</code> value must be in the range of <code>[0, 360]</code></li> </ol>"},{"location":"draft/#icon-materialalert-outline","title":"icon: material/alert-outline","text":""},{"location":"draft/#admonitions","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.</p>"},{"location":"draft/#configuration_2","title":"Configuration","text":"<p>This configuration enables admonitions, allows to make them collapsible and to nest arbitrary content inside admonitions. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Admonition</li> <li>Details</li> <li>SuperFences</li> </ul>"},{"location":"draft/#admonition-icons","title":"Admonition icons","text":"<p>Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme, or even a custom icon. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  icon:\n    admonition:\n      &lt;type&gt;: &lt;icon&gt; # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> Expand to show alternate icon sets  Octicons FontAwesome <pre><code>theme:\n  icon:\n    admonition:\n      note: octicons/tag-16\n      abstract: octicons/checklist-16\n      info: octicons/info-16\n      tip: octicons/squirrel-16\n      success: octicons/check-16\n      question: octicons/question-16\n      warning: octicons/alert-16\n      failure: octicons/x-circle-16\n      danger: octicons/zap-16\n      bug: octicons/bug-16\n      example: octicons/beaker-16\n      quote: octicons/quote-16\n</code></pre> <pre><code>theme:\n  icon:\n    admonition:\n      note: fontawesome/solid/note-sticky\n      abstract: fontawesome/solid/book\n      info: fontawesome/solid/circle-info\n      tip: fontawesome/solid/bullhorn\n      success: fontawesome/solid/check\n      question: fontawesome/solid/circle-question\n      warning: fontawesome/solid/triangle-exclamation\n      failure: fontawesome/solid/bomb\n      danger: fontawesome/solid/skull\n      bug: fontawesome/solid/robot\n      example: fontawesome/solid/flask\n      quote: fontawesome/solid/quote-left\n</code></pre>"},{"location":"draft/#usage_2","title":"Usage","text":"<p>Admonitions follow a simple syntax: a block starts with <code>!!!</code>, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces:</p> Admonition<pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"draft/#changing-the-title","title":"Changing the title","text":"<p>By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier:</p> Admonition with custom title<pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"draft/#removing-the-title","title":"Removing the title","text":"<p>Similar to changing the title, the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks:</p> Admonition without title<pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"draft/#collapsible-blocks","title":"Collapsible blocks","text":"<p>When Details is enabled and an admonition block is started with <code>???</code> instead of <code>!!!</code>, the admonition is rendered as a collapsible block with a small toggle on the right side:</p> Admonition, collapsible<pre><code>??? note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding a <code>+</code> after the <code>???</code> token renders the block expanded:</p> Admonition, collapsible and initially expanded<pre><code>???+ note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"draft/#inline-blocks","title":"Inline blocks","text":"<p>Admonitions can also be rendered as inline blocks (e.g., for sidebars), placing them to the right using the <code>inline</code> + <code>end</code> modifiers, or to the left using only the <code>inline</code> modifier:</p>  inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p> <p>Important: admonitions that use the <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p>"},{"location":"draft/#supported-types","title":"Supported types","text":"<p>Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is <code>note</code><sup>1</sup>:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"draft/#customization_1","title":"Customization","text":""},{"location":"draft/#classic-admonitions","title":"Classic admonitions","text":"<p>Prior to version , admonitions had a slightly different appearance:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If you want to restore this appearance, add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .admonition,\n.md-typeset details {\n  border-width: 0;\n  border-left-width: 4px;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"draft/#custom-admonitions","title":"Custom admonitions","text":"<p>If you want to add a custom admonition type, all you need is a color and an <code>*.svg</code> icon. Copy the icon's code from the <code>.icons</code> folder and add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"&gt;&lt;path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/&gt;&lt;/svg&gt;')\n}\n.md-typeset .admonition.pied-piper,\n.md-typeset details.pied-piper {\n  border-color: rgb(43, 155, 70);\n}\n.md-typeset .pied-piper &gt; .admonition-title,\n.md-typeset .pied-piper &gt; summary {\n  background-color: rgba(43, 155, 70, 0.1);\n}\n.md-typeset .pied-piper &gt; .admonition-title::before,\n.md-typeset .pied-piper &gt; summary::before {\n  background-color: rgb(43, 155, 70);\n  -webkit-mask-image: var(--md-admonition-icon--pied-piper);\n          mask-image: var(--md-admonition-icon--pied-piper);\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>After applying the customization, you can use the custom admonition type:</p> Admonition with custom type<pre><code>!!! pied-piper \"Pied Piper\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n</code></pre> <p>Pied Piper</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>Previously, some of the supported types defined more than one qualifier. For example, authors could use <code>summary</code> or <code>tldr</code> as alternative qualifiers to render an <code>abstract</code> admonition. As this increased the size of the CSS that is shipped with Material for MkDocs, the additional type qualifiers are now all deprecated and will be removed in the next major version. This will also be mentioned in the upgrade guide.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features.\u00a0\u21a9</p> </li> </ol>"},{"location":"lists/","title":"Lists - [x]","text":"<p>Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists, which are supported through standard Markdown, as well as definition lists and task lists, which are supported through extensions.</p>"},{"location":"lists/#configuration","title":"Configuration","text":"<p>This configuration enables the use of definition lists and tasks lists, which are both not part of the standard Markdown syntax. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Definition Lists</li> <li>Tasklist</li> </ul>"},{"location":"lists/#usage","title":"Usage","text":""},{"location":"lists/#using-unordered-lists","title":"Using unordered lists","text":"<p>Unordered lists can be written by prefixing a line with a <code>-</code>, <code>*</code> or <code>+</code> list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other:</p> List, unordered<pre><code>- Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur\n  accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh\n  lacinia sed. Aenean in finibus diam.\n\n    * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    * Nam vulputate tincidunt fringilla.\n    * Nullam dignissim ultrices urna non auctor.\n</code></pre> <ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul>"},{"location":"lists/#using-ordered-lists","title":"Using ordered lists","text":"<p>Ordered lists must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to <code>1.</code>, as they will be re-numbered when rendered:</p> List, ordered<pre><code>1.  Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis\n    sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis\n    nulla. Vivamus a pharetra leo.\n\n    1.  Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet\n        quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a\n        ultricies libero efficitur sed.\n\n    2.  Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet\n        rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.\n\n        1.  Mauris dictum mi lacus\n        2.  Ut sit amet placerat ante\n        3.  Suspendisse ac eros arcu\n</code></pre> <ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"lists/#using-definition-lists","title":"Using definition lists","text":"<p>When Definition Lists is enabled, lists of arbitrary key-value pairs, e.g. the parameters of functions or modules, can be enumerated with a simple syntax:</p> Definition list<pre><code>`Lorem ipsum dolor sit amet`\n\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n`Cras arcu libero`\n\n:   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\n    ut eros sed sapien ullamcorper consequat. Nunc ligula ante.\n\n    Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    Nam vulputate tincidunt fringilla.\n    Nullam dignissim ultrices urna non auctor.\n</code></pre> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <p>[ ] ### Using task lists</p>"},{"location":"lists/#using-task-lists","title":"Using task lists [ ]","text":"<p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> Task list<pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> 1 <ul> <li>kjdfgkdfjg jhfdkgf</li> <li>g fidjg fkgjf jk</li> <li><code>sdsfsd</code></li> </ul> 2 <p>Overall Function This security group: 1. Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>). 2. Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination. 3. Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases.</p> 3 <p>Overall Function This security group: 1. Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>). 2. Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination. 3. Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</p> 4 <p>Overall Function This security group: 1. Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>). 2. Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination. 3. Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</p> 5 <p>Overall Function</p> <p>This security group:</p> <ol> <li>Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>).</li> <li>Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination.</li> <li>Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</li> </ol> 6 <p>Overall Function This security group: 1. Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>). 2. Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination. 3. Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</p> <pre><code>??? youtube \"7\"\n\n        ==**Overall Function**==\n\n        This security group:\n\n        * Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (`var.openvpn_tcp_ports` and `var.openvpn_udp_ports`).\n        * Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination.\n        * Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases\n</code></pre> 8 <p>Overall Function This security group: * Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>). * Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination. * Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</p> 9 <p>Overall Function</p> <p>This security group:</p> <ul> <li>Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>).</li> <li>Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination.</li> <li>Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases</li> </ul>"},{"location":"profile/","title":"Go To My Profile Page","text":"<p>OpeyemiTechPro Profile Page</p>"},{"location":"profile_draft/","title":"Opeyemi Okuboyejo Profile","text":"Opeyemi Okuboyejo"},{"location":"profile_draft/#about-me","title":"About Me","text":"<p>Hello, I'm Opeyemi Okuboyejo</p> <p></p> <p>An Experienced AWS Certified Solutions Architect skilled in designing resilient distributed systems. Proficient in Microsoft technologies, with a track record of implementing solutions for medium to large-scale organizations. 15+ years in the industry, well-versed in cloud, systems, network administration, and more. Passionate for learning with good entrepreneurial and leadership skills.</p>"},{"location":"rs/","title":"Opeyemi's Resume Download Page","text":"<p>Opeyemi's Resume Download Link</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#the-following-is-a-list-of-relevant-tags","title":"The Following is a list of relevant tags:","text":""},{"location":"tags/#tag:aws","title":"AWS","text":"<ul> <li>            10-Microservices CI-CD Deployment          </li> <li>            AWS Projects          </li> <li>            OpenVPN Access Server Setup          </li> </ul>"},{"location":"tags/#tag:devops","title":"DevOps","text":"<ul> <li>            10-Microservices CI-CD Deployment          </li> <li>            DevOps Projects          </li> </ul>"},{"location":"tags/#tag:knowledge-base","title":"Knowledge Base","text":"<ul> <li>            KnowledgeBase Articles          </li> </ul>"},{"location":"tags/#tag:kubernetes","title":"Kubernetes","text":"<ul> <li>            10-Microservices CI-CD Deployment          </li> </ul>"},{"location":"tags/#tag:openvpn","title":"OpenVPN","text":"<ul> <li>            OpenVPN Access Server Setup          </li> </ul>"},{"location":"tags/#tag:terraform","title":"Terraform","text":"<ul> <li>            OpenVPN Access Server Setup          </li> <li>            Terraform Projects          </li> </ul>"},{"location":"yt/","title":"Go To My YouTube Channel","text":"<p>OpeyemiTechPro YouTube</p>"},{"location":"aws_projects/","title":"AWS Projects","text":"","tags":["AWS"]},{"location":"aws_projects/#aws-related-projects","title":"AWS Related Projects","text":"","tags":["AWS"]},{"location":"blog/","title":"Welcome to OpeyemiTechPro Blog","text":""},{"location":"blog/how-i-got-300-free-aws-credits/","title":"How I Got $300 FREE AWS Credits","text":"How I Got $300 FREE AWS Credits <p>Six months ago, I applied for $300 in free AWS credits, and it\u2019s been a game-changer for my cloud projects. With these credits, I\u2019ve gone beyond the Free Tier plan, provisioning multiple larger EC2 instances and leaving them running for days ,  experimenting with various kubernetes deployments, and trying out IaC configurations. It has opened up so many possibilities without worrying about costs. In this shot blog post, I share the process of approval and some other relevant resouces along with tips for getting and using AWS credits for your projects!</p> YouTube - Watch this Video Where I explained How I Got $300 FREE AWS Credits <p> How I Got $300 FREE AWS Credits </p> <p>In this video I share how I got $300 FREE AWS Credits and how you can also apply for the credits.</p>"},{"location":"blog/how-i-got-300-free-aws-credits/#the-invitation-by-aws","title":"The Invitation by AWS","text":"<p>Earlier this year, I got an email from AWS inviting me to apply for The AWS Rapid Ramp Credit Program which provides a $300 credit to small businesses to quickly get started testing AWS against their specific IT and business requirements by subsidizing a proof of concept.  The free AWS credits would be applied to my AWS account. </p> <p></p> <p>This was trilling as my AWS account was relatively new (barely 1-month old). </p> <p>The process was fairly straightforward. I followed the link in the email and filled out an application on the AWS website, explaining how I planned to use their cloud services for personal projects and learning. A week later, I received an approval email, and just like that, I had $300 to explore more of AWS.</p> <p></p> <p>I later discovered that though I was invited to apply for the credits, anyone could easily apply for the free $300 credits as long as you meet some basic requirements.</p> <p>To qualify for the $300 AWS Rapid Ramp Credit Program, you must have: 1. A valid AWS account, with up-to-date billing information (reseller accounts do not qualify) 2. Not previously received more than $300 of AWS promotional credit 3. A sufficient business case and proof of concept to test using the credits 4. No linked accounts</p>"},{"location":"blog/how-i-got-300-free-aws-credits/#how-to-apply-for-the-aws-300-credits","title":"How To Apply For the AWS $300 Credits","text":"<p>Applying for AWS credits is simple. Start by visiting the AWS Promotional Credits page (link below), where you\u2019ll find the application form. You\u2019ll need to provide basic details about your AWS account, your project description and intent explaining how you plan to use AWS services. Be clear about your goals and the value AWS will bring to your project. Once submitted, AWS typically reviews your request within a few days. If approved, you\u2019ll receive an email notification saying the credits have been applied to your account and you can view your credits from your AWS Billing and Cost Mangement Console.</p> Click Here to apply for the $300 AWS Rapid Ramp Credit Program <p> </p>"},{"location":"blog/how-i-got-300-free-aws-credits/#what-services-does-the-aws-credits-cover","title":"What Services Does the AWS Credits Cover?","text":"<p>The $300 credits cover more than 230 AWS services including Compute, Lambda serverless, storage, Bedrock, Sagemaker, EKS, ECR, and the list goes on . </p> Click here to view the list of services covered by the AWS Credits <p>Note: This list may change subject to AWS Terms and Conditions</p> <p>Complete list of services</p> <p>These services can be used with the associated credit:</p> <ol> <li>AWS Amplify</li> <li>AWS App Runner</li> <li>AWS AppFabric</li> <li>AWS AppSync</li> <li>AWS Application Migration Service</li> <li>AWS Audit Manager</li> <li>AWS B2B Data Interchange</li> <li>AWS Backup</li> <li>AWS Billing Conductor</li> <li>AWS Budgets</li> <li>AWS Certificate Manager</li> <li>AWS Clean Rooms</li> <li>AWS Cloud Map</li> <li>AWS Cloud WAN</li> <li>AWS CloudFormation</li> <li>AWS CloudHSM</li> <li>AWS CloudTrail</li> <li>AWS CodeArtifact</li> <li>AWS CodeCommit</li> <li>AWS CodeDeploy</li> <li>AWS CodePipeline</li> <li>AWS Compute Optimizer</li> <li>AWS Config</li> <li>AWS Cost Explorer</li> <li>AWS Data Exchange</li> <li>AWS Data Pipeline</li> <li>AWS Data Transfer</li> <li>AWS DataSync</li> <li>AWS Database Migration Service</li> <li>AWS DeepRacer</li> <li>AWS Device Farm</li> <li>AWS Direct Connect</li> <li>AWS Directory Service</li> <li>AWS Elastic Disaster Recovery</li> <li>AWS Elemental MediaConnect</li> <li>AWS Elemental MediaConvert</li> <li>AWS Elemental MediaLive</li> <li>AWS Elemental MediaPackage</li> <li>AWS Elemental MediaStore</li> <li>AWS Elemental MediaTailor</li> <li>AWS End User Messaging Third Party Fees</li> <li>AWS Entity Resolution</li> <li>AWS Fault Injection Simulator</li> <li>AWS Firewall Manager</li> <li>AWS Global Accelerator</li> <li>AWS Glue</li> <li>AWS Glue Elastic Views</li> <li>AWS Greengrass</li> <li>AWS Ground Station</li> <li>AWS HealthImaging</li> <li>AWS Identity and Access Management Access Analyzer</li> <li>AWS Import/Export</li> <li>AWS Import/Export Snowball</li> <li>AWS IoT</li> <li>AWS IoT 1 Click</li> <li>AWS IoT Analytics</li> <li>AWS IoT Device Defender</li> <li>AWS IoT Device Management</li> <li>AWS IoT Events</li> <li>AWS IoT FleetWise</li> <li>AWS IoT SiteWise</li> <li>AWS IoT Things Graph</li> <li>AWS IoT TwinMaker</li> <li>AWS Key Management Service</li> <li>AWS Lake Formation</li> <li>AWS Lambda</li> <li>AWS Mainframe Modernization</li> <li>AWS Migration Hub Refactor Spaces</li> <li>AWS Modular Data Center</li> <li>AWS Network Firewall</li> <li>AWS OpsWorks</li> <li>AWS Outposts</li> <li>AWS Parallel Computing Service</li> <li>AWS Payment Cryptography</li> <li>AWS Private 5G</li> <li>AWS Resilience Hub</li> <li>AWS RoboMaker</li> <li>AWS Route 53 Application Recovery Controller</li> <li>AWS Secrets Manager</li> <li>AWS Security Hub</li> <li>AWS Service Catalog</li> <li>AWS Shield</li> <li>AWS SimSpace Weaver</li> <li>AWS Snowball Extra Days</li> <li>AWS Step Functions</li> <li>AWS Storage Gateway</li> <li>AWS Storage Gateway Deep Archive</li> <li>AWS Supply Chain</li> <li>AWS Support (Business)</li> <li>AWS Support (Developer)</li> <li>AWS Systems Manager</li> <li>AWS Telco Network Builder</li> <li>AWS Transfer Family</li> <li>AWS WAF</li> <li>AWS Wickr</li> <li>AWS X-Ray</li> <li>AWS re:Post Private</li> <li>Alexa Top Sites</li> <li>Alexa Web Information Service</li> <li>Alexa for Business</li> <li>Amazon API Gateway</li> <li>Amazon AppFlow</li> <li>Amazon AppStream</li> <li>Amazon Athena</li> <li>Amazon Augmented AI</li> <li>Amazon Bedrock</li> <li>Amazon Braket</li> <li>Amazon Chime</li> <li>Amazon Chime Business Calling a service sold by AMCS LLC</li> <li>Amazon Chime Call Me</li> <li>Amazon Chime Call Me a service sold by AMCS LLC</li> <li>Amazon Chime Dial In a service sold by AMCS LLC</li> <li>Amazon Chime Dialin</li> <li>Amazon Chime Features</li> <li>Amazon Chime Services</li> <li>Amazon Chime Voice Connector a service sold by AMCS LLC</li> <li>Amazon Cloud Directory</li> <li>Amazon CloudFront</li> <li>Amazon CloudSearch</li> <li>Amazon CodeWhisperer</li> <li>Amazon Cognito</li> <li>Amazon Cognito Sync</li> <li>Amazon Comprehend</li> <li>Amazon Connect</li> <li>Amazon Connect Customer Profiles</li> <li>Amazon Connect Voice ID</li> <li>Amazon DataZone</li> <li>Amazon Deadline Cloud</li> <li>Amazon Detective</li> <li>Amazon DevOps Guru</li> <li>Amazon DocumentDB (with MongoDB compatibility)</li> <li>Amazon DynamoDB</li> <li>Amazon EC2 Container Registry (ECR)</li> <li>Amazon EKS Anywhere</li> <li>Amazon ElastiCache</li> <li>Amazon Elastic Compute Cloud</li> <li>Amazon Elastic Container Registry Public</li> <li>Amazon Elastic Container Service</li> <li>Amazon Elastic Container Service for Kubernetes</li> <li>Amazon Elastic File System</li> <li>Amazon Elastic Inference</li> <li>Amazon Elastic MapReduce</li> <li>Amazon Elastic Transcoder</li> <li>Amazon FSx</li> <li>Amazon FinSpace</li> <li>Amazon Forecast</li> <li>Amazon Fraud Detector</li> <li>Amazon GameLift</li> <li>Amazon Glacier</li> <li>Amazon GuardDuty</li> <li>Amazon HealthLake</li> <li>Amazon Honeycode</li> <li>Amazon IVS Chat</li> <li>Amazon Inspector</li> <li>Amazon Inspector</li> <li>Amazon Interactive Video Service</li> <li>Amazon Kendra</li> <li>Amazon Keyspaces (for Apache Cassandra)</li> <li>Amazon Kinesis</li> <li>Amazon Kinesis Analytics</li> <li>Amazon Kinesis Firehose</li> <li>Amazon Kinesis Video Streams</li> <li>Amazon Lex</li> <li>Amazon Lightsail</li> <li>Amazon Location Service</li> <li>Amazon Lookout for Equipment</li> <li>Amazon Lookout for Metrics</li> <li>Amazon Lookout for Vision</li> <li>Amazon MQ</li> <li>Amazon Machine Learning</li> <li>Amazon Macie</li> <li>Amazon Managed Blockchain</li> <li>Amazon Managed Grafana</li> <li>Amazon Managed Service for Prometheus</li> <li>Amazon Managed Streaming for Apache Kafka</li> <li>Amazon Managed Workflows for Apache Airflow</li> <li>Amazon MemoryDB</li> <li>Amazon Mobile Analytics</li> <li>Amazon Monitron</li> <li>Amazon Neptune</li> <li>Amazon Nimble Studio</li> <li>Amazon Omics</li> <li>Amazon OpenSearch Service</li> <li>Amazon Personalize</li> <li>Amazon Pinpoint</li> <li>Amazon Polly</li> <li>Amazon Q</li> <li>Amazon Quantum Ledger Database</li> <li>Amazon QuickSight</li> <li>Amazon Redshift</li> <li>Amazon Rekognition</li> <li>Amazon Relational Database Service</li> <li>Amazon Route 53</li> <li>Amazon S3 Glacier Deep Archive</li> <li>Amazon SageMaker</li> <li>Amazon Security Lake</li> <li>Amazon Simple Email Service</li> <li>Amazon Simple Notification Service</li> <li>Amazon Simple Queue Service</li> <li>Amazon Simple Storage Service</li> <li>Amazon Simple Workflow Service</li> <li>Amazon SimpleDB</li> <li>Amazon Sumerian</li> <li>Amazon Textract</li> <li>Amazon Timestream</li> <li>Amazon Transcribe</li> <li>Amazon Translate</li> <li>Amazon Verified Permissions</li> <li>Amazon Virtual Private Cloud</li> <li>Amazon WorkDocs</li> <li>Amazon WorkLink</li> <li>Amazon WorkSpaces</li> <li>Amazon WorkSpaces Application Manager</li> <li>Amazon WorkSpaces Thin Client</li> <li>Amazon WorkSpaces Web</li> <li>AmazonCloudWatch</li> <li>AmazonConnectCases</li> <li>AmazonWorkMail</li> <li>CloudWatch Events</li> <li>CodeBuild</li> <li>CodeCatalyst</li> <li>CodeGuru</li> <li>Comprehend Medical</li> <li>Contact Center Telecommunications (service sold by AMCS, LLC)</li> <li>Contact Center Telecommunications Korea</li> <li>Contact Center Telecommunications South Africa</li> <li>Contact Lens for Amazon Connect</li> <li>DynamoDB Accelerator (DAX)</li> <li>Elastic Load Balancing</li> <li>Q in Connect</li> <li>VMware Cloud on AWS</li> </ol> <p>View List of Services covered by the AWS Credits</p> <p>With these credits, I\u2019ve been able to venture beyond the AWS Free Tier and try out AWS services that would normally come with a cost.</p> <p>The credits have been a great opportunity to test and grow my cloud projects without worrying about unexpected costs.</p>"},{"location":"blog/how-i-got-300-free-aws-credits/#additional-resources","title":"Additional Resources","text":"<p>Below are some additional resources that talk more about AWS credits:</p> <ol> <li>Unlocking AWS Credits: A Comprehensive Guide - AWS Community</li> <li>Applying AWS Credits- AWS Documentation Website</li> </ol>"},{"location":"blog/aws-introduces-multi-session-support-in-the-aws-management-console/","title":"Exciting News: AWS Introduces Multi-Session Support in the AWS Management Console!","text":"AWS Introduces Multi-Session Support in the AWS Management Console <p>I am thrilled to share that AWS has rolled out a fantastic new feature in the AWS Management Console \u2014 Multi-Session Support!</p> <p>This innovative addition allows users to sign in to up to five different identities simultaneously within a single web browser. Whether you're managing multiple AWS accounts or juggling various roles within the same account, this feature is designed to streamline your workflow and enhance productivity.</p>"},{"location":"blog/aws-introduces-multi-session-support-in-the-aws-management-console/#key-highlights","title":"Key Highlights:","text":"<ol> <li>Multi-Session Capability: Sign in to up to five different identities at once. These can be any combination of root, IAM, or federated roles across different accounts or within the same account.</li> <li>Separate Instances: Each identity opens its own instance of the AWS Management Console in a new tab, making it easier to manage multiple sessions without confusion.</li> <li>Easy Opt-In: To enable multi-session support, simply choose \"Turn on multi-session\" in the account menu or enable it on the AWS Management Console. Remember, this opt-in is browser-specific, so you'll need to enable it separately for each browser you use.</li> <li>Seamless Transition: Once enabled, the console URL will include a subdomain, so be sure to update your bookmarks and console links accordingly.</li> </ol> Multi-Session Support in the AWS Management Console <p>This feature is a game-changer for AWS users who need to manage multiple accounts or roles efficiently. By allowing simultaneous sign-ins, AWS is making it easier than ever to navigate and manage your cloud resources.</p> <p>Read more from the AWS Documentation page</p>"},{"location":"devops_projects/","title":"DevOps Projects","text":"","tags":["DevOps"]},{"location":"devops_projects/10micro/","title":"End-to_End CI/CD Deployment to Kubernetes","text":"","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#setup-and-host-your-own-free-vpn-server-on-aws-using-terraform-and-openvpn","title":"Setup and Host Your Own Free VPN Server on AWS Using Terraform and OpenVPN","text":"<p>In this mini-project, I will demonstrate how to setup and self-host a VPN server on AWS using terraform and OpenVPN Access Server.</p> Watch the Video - How To Create a Free Self-Hosted VPN Server on AWS using Terraform and OpenVPN <p> </p> <p>How to Create a Free Self-Hosted VPN Server on AWS using Terraform and OpenVPN</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#introduction","title":"Introduction","text":"<p>Setting up a self-hosted VPN server can be a cost-effective and secure solution for personal or organizational needs. This documentation provides a step-by-step guide on using a Terraform configuration script to deploy an OpenVPN Access server on AWS.  With this guide, you'll learn how to configure the script, customize it for your requirements, and launch a fully functional VPN server in less than 5-minutes and ensures your internet traffic remains private and encrypted without been locked in a vpn subscription plan. This VPN server is also \"disposable\", meaning, you can create and delete it anytime after use with just one command  </p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#pre-requisites","title":"Pre-requisites","text":"<ul> <li> AWS account (free tier account will work)</li> <li> Terraform installed on local machine (How to Install Terraform)</li> <li> OpenVPN Connect Client software installed on local machine (download from here)</li> <li> Your AWS access key ID and secret access key (learn how to get your AWS access keys here)</li> <li> AWS CLI installed and configured with your AWS access key ID and Secret access keys (learn more about AWS CLI here) </li> <li> <p> The OpenVPN-Terraform Setup Script (click the button below)</p> <p> OpenVPN-Terraform Source Code  </p> </li> </ul>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#what-this-terraform-configuration-script-does","title":"What this Terraform Configuration Script Does","text":"<p>This terraform configuration creates a fully functional, free and ready-to-use self-hosted OpenVPN Server in any chosen AWS region. The script perfomes the following operations:</p> <ul> <li>Creates a Ubuntu 22.04 EC2 instance and configures a fully functional OpenVPN Access Server on it</li> <li>Configures the server as a type t2-micro instance so that it can run within the AWS Free-tier plan (Learn more about the AWS free-tier plan here)</li> <li>Sets up and configures the VPN server with an IP address in the speicified AWS region.</li> <li>Generates an AWS keypair file for optional SSH connection to the EC2 instance, downloads the file and saves it in the terraform working directory on your local machine. The chosen AWS region is appended to the name of the keypair file.</li> <li>Generates an OpenVPN User Profile file (*.ovpn) that will be used to authenticate and establish an encrypted VPN connection from your local machine to the VPN server. The OpenPVN User Profile file is also donwloaded and saved to the terraform working directory on your local machine.</li> <li>One command tear down that destroys and cleans up the whole infrastructure along with the locally created files (the keypair file and the *.ovpn user profile file)</li> </ul>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#how-the-terraform-configuration-script-works","title":"How the Terraform Configuration Script works","text":"<p>Technical details about how the terraform script works is described below:</p> Click here to see details of how the OpenVPN Terraform config works under the hood <p> OpenVPN-Terraform Source Code  </p> <p>Each of the files in  this terraform configuration module is explained below:</p> The <code>ami.tf</code> file ami.tf <pre><code># Select latest Ubuntu 22.04 ami \n\ndata \"aws_ami\" \"ubuntu\" {\nmost_recent = true\n\nfilter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n} # (1)!\n\nfilter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n} # (2)!\n\nowners = [\"099720109477\"]  # Canonical's AWS account ID\n} # (3)!\n</code></pre> <ol> <li>Lines 6-9 filters the name of the ami \"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"</li> <li>Lines 11-14 filters the virtualization type of the ami</li> <li>Line 16 filters the AWS account ID of the ami publisher - Canonical</li> </ol> <p>This <code>ami.tf</code> is used to find the latest Ubuntu 22.04 AMI (Amazon Machine Image) from the AWS ami Catalog. </p> <ul> <li> <p>It creates a data source named \"ubuntu\" that searches for AMIs with these criteria:</p> <ul> <li> <p>Uses most_recent = true to get the latest version</p> </li> <li> <p>Filters for Ubuntu 22.04 (Jammy Jellyfish) images using the name pattern</p> </li> <li> <p>Ensures it's using HVM (Hardware Virtual Machine) virtualization</p> </li> <li> <p>Only looks for images owned by Canonical (Ubuntu's publisher) using their AWS account ID (099720109477)</p> </li> </ul> </li> </ul> <p>This prevents hardcoding a specific AMI ID into the script, which could become outdated. The AMI ID is then referenced elsewhere in the Terraform code using <code>data.aws_ami.ubuntu.id</code></p> The <code>OpenVPN_ec2.tf</code> file OpenVPN_ec2.tf <pre><code>resource \"aws_instance\" \"OpenVPN_Server\" {\nami                     = data.aws_ami.ubuntu.id\ninstance_type           = var.OpenVPN_instance_type\nvpc_security_group_ids  = [ aws_security_group.openvpn_SG.id ]\nuser_data               = templatefile(\"./openvpn_userdata.tpl\", {openvpn_user = local.openvpn_user})\nkey_name                = aws_key_pair.key_pair.key_name\n\nroot_block_device {\n    volume_size           = 8\n}\n\n# Set the metadata service to allow IMDSv2\nmetadata_options {\n    http_tokens                 = \"optional\"    # Allows IMDSv1 and IMDSv2\n    http_put_response_hop_limit = 1      # Default hop limit for the PUT request\n    http_endpoint               = \"enabled\"     # Enable metadata service\n}\n\ntags = {\n    Name = \"${var.project_name}_Server\"\n    Region    = var.selected_region\n    KeyPair   = local.key_pair_name\n    Project   = var.project_name\n}\n\n}\n\nlocals {\n# Create key name with OpenVPN-Keypair prefix and region\nkey_pair_name = \"OpenVPN-Keypair-${var.selected_region}\"\n\n# Create Profile name for the OpenVPN User\nopenvpn_user = \"OpeyemiTechPro-${var.selected_region}\"\n\n# Display formatted region information\nregion_display = join(\"\\n\", [for region, location in var.aws_regions : format(\"%s = %s\", region, location)])\n\n}\n\n\n# Generate a private key\nresource \"tls_private_key\" \"key_pair\" {\nalgorithm = \"RSA\"\nrsa_bits  = 2048\n}\n\n# Create key pair in AWS\nresource \"aws_key_pair\" \"key_pair\" {\nkey_name   = local.key_pair_name\npublic_key = tls_private_key.key_pair.public_key_openssh\n\n# tag the key pair\ntags = {\n    Name        = local.key_pair_name\n    Region      = var.selected_region\n    Project     = var.project_name\n    CreatedBy   = \"Terraform\"\n}\n}\n\n# Save private key locally\nresource \"local_file\" \"private_key\" {\ncontent         = tls_private_key.key_pair.private_key_pem\nfilename        = \"${local.key_pair_name}.pem\"\nfile_permission = \"0400\"\n}\n\n\n# Create a null resource to display available regions\nresource \"null_resource\" \"region_display\" {\ntriggers = {\n    always_run = timestamp()\n}\n\nprovisioner \"local-exec\" {\n    command = &lt;&lt;-EOT\n    echo \"Available AWS Regions:\"\n    echo \"${local.region_display}\"\n    echo \"\\nSelected Region: ${var.selected_region} (${var.aws_regions[var.selected_region]})\"\n    EOT\n}\n}\n</code></pre> <p>This is the main config file that sets up the OpenVPN server infrastructure.</p> <ul> <li> <p>It reates an EC2 instance for the OpenVPN server with the specified configurations (using Ubuntu AMI selected above)</p> </li> <li> <p>Sets up a key pair for SSH access</p> </li> <li> <p>Configures the instance metadata options so it can be queried by the user_data script</p> </li> <li> <p>Creates and saves an RSA private key locally</p> </li> <li> <p>Includes tags for resource management</p> </li> <li> <p>Sets the connection profile name for the VPN server</p> </li> <li> <p>Displays available AWS regions through a null resource and determines the selected region during execution</p> </li> </ul> <p>Each code section is explained breifly below:</p> <p>aws_instance Resource </p> <p>This resource defines the EC2 instance for the OpenVPN server.  </p> <ul> <li><code>ami</code>: Uses the ID of a specific Ubuntu AMI fetched via a data source.  </li> <li><code>instance_type</code>: Sets the EC2 instance type, determined by a variable (<code>var.OpenVPN_instance_type</code>).  </li> <li><code>vpc_security_group_ids</code>: Attaches the instance to a specific security group (<code>aws_security_group.openvpn_SG</code>).  </li> <li><code>user_data</code>: Provides initialization commands for the instance via a template file. Custom variables, such as <code>openvpn_user</code>, are passed to the template.  </li> <li><code>key_name</code>: Associates the instance with an SSH key pair created earlier.  </li> <li><code>root_block_device</code>: Defines the root storage for the instance, setting its size to 8 GB.  </li> <li><code>metadata_options</code>: Configures the EC2 metadata service to support both IMDSv1 and IMDSv2 for instance metadata retrieval.  </li> <li><code>tags</code>: Adds custom tags to the instance for identification, including project and region details.</li> </ul> <p>locals Block </p> <p>Defines reusable local variables and values for the configuration.  </p> <ul> <li><code>key_pair_name</code>: Constructs a unique key name with a prefix and region.  </li> <li><code>openvpn_user</code>: Creates a unique username for OpenVPN based on the region.  </li> <li><code>region_display</code>: Formats a list of available AWS regions for display purposes.  </li> </ul> <p>tls_private_key Resource </p> <p>Generates a 2048-bit RSA private key used to create an AWS key pair.  </p> <p>aws_key_pair Resource </p> <p>Creates an SSH key pair in AWS.  </p> <ul> <li><code>key_name</code>: Uses the locally defined key pair name.  </li> <li><code>public_key</code>: Sets the public key from the generated private key.  </li> <li><code>tags</code>: Adds metadata for the key pair, such as the project name and creation method.  </li> </ul> <p>local_file Resource </p> <p>Stores the generated private key securely on the local machine.  </p> <ul> <li><code>content</code>: Saves the private key in PEM format.  </li> <li><code>filename</code>: Names the file using the key pair name and <code>.pem</code> extension.  </li> <li><code>file_permission</code>: Sets restrictive permissions (<code>0400</code>) for security.  </li> </ul> <p>null_resource for Region Display </p> <p>A helper resource to print available AWS regions to the console.  </p> <ul> <li><code>triggers</code>: Ensures the resource runs every time by using the current timestamp.  </li> <li><code>provisioner \"local-exec\"</code>: Executes a script that prints available AWS regions and the selected region's details.  </li> </ul> The <code>openvpn_userdata.tpl</code> file openvpn_userdata.tpl <pre><code>#!/bin/bash\n\n# Bash script to intialize OpenVPN Server\n\n# Set error trap to exit the script immediately on first error.\nset -e \n\n# Log all output to a file for reference \nexec &gt;&gt; /var/log/setup_script.log 2&gt;&amp;1\n\necho \"Initializing script...\"\necho\necho \"Updating packages...\"\nsudo apt update -y\necho\necho \"Setting FQDN  &amp; Public IP\"\necho\nFQDN=$(curl -sS http://169.254.169.254/latest/meta-data/public-hostname)\nPUB_IP=$(curl -sS http://169.254.169.254/latest/meta-data/public-ipv4)\n\n\necho \"$FQDN\"\necho\necho \"$PUB_IP\"\necho \necho \"Download installation script\"\necho\n# Check Agristan's repo for full details on installation script options- https://github.com/angristan/openvpn-install\n\nwget https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh -O openvpn-install.sh\nchmod +x openvpn-install.sh \n\necho \"Installing OpenVPN Access Server...\"\necho\nsudo AUTO_INSTALL=y \\\n    APPROVE_IP=$PUB_IP \\\n    ENDPOINT=$FQDN \\\n    CLIENT=${openvpn_user} \\\n    ./openvpn-install.sh\n\n\necho \"Moving User Profile ${openvpn_user}.ovpn to the Ubuntu user home directory...\"\necho\nmv /root/${openvpn_user}.ovpn /home/ubuntu/${openvpn_user}.ovpn\n\necho\necho \"Hurray! OpenVPN Installed succesfully\"\n\n# Rename Hostname\necho \"Set hostname as OpenVPN-Server...\"\nsudo hostnamectl set-hostname OpenVPN-Server \n</code></pre> <p>This is the userdata script that is used to bootstrap the server immediately after it is provisioned by Terraform. It is configured as a template file so that terraform can interpolate the value of <code>openvpn_user</code> variable from the variables declared in the config file into the user_data script.</p> <p>How it works:</p> <ul> <li> <p>Sets bash environment and error handling</p> </li> <li> <p>Captures all the setup process in the log file <code>/var/log/setup_script.log</code> so it can be referenced if there are errors </p> </li> <li> <p>Updates system packages</p> </li> <li> <p>Retrieves instance metadata (FQDN and Public IP) from AWS metadata service which will be needed by the OpenVPN installatin script</p> </li> <li> <p>Downloads the installation script from Angristan's GitHub repository  and sets the executable permissions on the file</p> </li> <li> <p>Runs the installation script configuration automatically without prompts using the \"Public IP\" and \"FQDN\" values queried from the instance metadata</p> </li> <li> <p>Sets the Custom client name (from variable ${openvpn_user})</p> </li> <li> <p>Moves the generated client profile (.ovpn file) to Ubuntu user's home directory</p> </li> <li> <p>Sets the system hostname to \"OpenVPN-Server\"</p> </li> </ul> <p>Each section of the file is explained below:</p> <p>Shebang and Setup </p> <ul> <li><code>#!/bin/bash</code>: Specifies the script should run using the Bash shell.  </li> <li><code>set -e</code>: Ensures the script exits immediately if any command fails, preventing incomplete setups.  </li> <li><code>exec &gt;&gt; /var/log/setup_script.log 2&gt;&amp;1</code>: Redirects all script output (standard and error) to a log file for debugging and reference.</li> </ul> <p>Logging Initialization and Updates </p> <ul> <li><code>echo \"Initializing script...\"</code>: Provides a visual indicator that the script has started.  </li> <li><code>sudo apt update -y</code>: Updates package lists to ensure the system has the latest available versions.</li> </ul> <p>Retrieve and Display Instance Metadata </p> <ul> <li><code>FQDN=$(curl -sS http://169.254.169.254/latest/meta-data/public-hostname)</code>: Retrieves the Fully Qualified Domain Name (FQDN) of the instance from AWS metadata.  </li> <li><code>PUB_IP=$(curl -sS http://169.254.169.254/latest/meta-data/public-ipv4)</code>: Retrieves the public IPv4 address of the instance from AWS metadata.  </li> <li><code>echo \"$FQDN\"</code> &amp; <code>echo \"$PUB_IP\"</code>: Prints the FQDN and public IP to the console for verification.</li> </ul> <p>Download and Prepare OpenVPN Installation Script </p> <ul> <li><code>wget https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh -O openvpn-install.sh</code>: Downloads the OpenVPN installation script from Angristan\u2019s GitHub repository.  </li> <li><code>chmod +x openvpn-install.sh</code>: Makes the script executable.</li> </ul> <p>Install OpenVPN </p> <ul> <li><code>sudo AUTO_INSTALL=y \\</code>: Enables automatic installation with predefined options.  </li> <li><code>APPROVE_IP=$PUB_IP \\</code>: Uses the retrieved public IP for OpenVPN configuration.  </li> <li><code>ENDPOINT=$FQDN \\</code>: Sets the FQDN as the server endpoint.  </li> <li><code>CLIENT=${openvpn_user} \\</code>: Configures the OpenVPN client with a specified username.  </li> <li><code>./openvpn-install.sh</code>: Executes the installation script.</li> </ul> <p>Move User Configuration File </p> <ul> <li><code>mv /root/${openvpn_user}.ovpn /home/ubuntu/${openvpn_user}.ovpn</code>: Moves the generated client profile (<code>.ovpn</code> file) to the default user\u2019s home directory for easier access.</li> </ul> <p>Post-Installation Messages and Cleanup </p> <ul> <li><code>echo \"Hurray! OpenVPN Installed successfully\"</code>: Prints a success message to indicate completion.  </li> <li><code>sudo hostnamectl set-hostname OpenVPN-Server</code>: Changes the system\u2019s hostname to \"OpenVPN-Server\" for easy identification.</li> </ul> The <code>outputs.tf</code> file outputs.tf <pre><code># Output values for OpenVPN Server\noutput \"OpenVPN-Public-ip-address\" {\ndescription = \"Public ip address of the OpenVPN server\"\nvalue = aws_instance.OpenVPN_Server.public_ip\n}\n\n# Display the instance-ID of the OpenVPN Server\noutput \"OpenVPN-instance-id\" {\ndescription = \"Instance id of the OpenVPN Server\"\nvalue = aws_instance.OpenVPN_Server.id\n}\n\n# Display the instance-ID of the OpenVPN Server\noutput \"key_pair_name\" {\ndescription = \"Name of the created key pair\"\nvalue       = local.key_pair_name\n}\n\n# Display the path of the private key file\noutput \"private_key_path\" {\ndescription = \"Path to the private key file\"\nvalue       = local_file.private_key.filename\n}\n\n# Dispaly the ssh connection string\noutput \"ssh_connection_string\" {\ndescription = \"SSH connection string\"\nvalue       = \"ssh -i ${local_file.private_key.filename} ubuntu@${aws_instance.OpenVPN_Server.public_ip}\"\n}\n\n# Display the path of the downloaded ovpn profile config file\noutput \"ovpn_config_path\" {\nvalue       = \"./${local.openvpn_user}.ovpn\"\ndescription = \"Path to the downloaded OpenVPN config file\"\n}\n\n# Display the path of the downloaded ovpn profile config fil\noutput \"ovpn_download_complete\" {\nvalue = \"OpenVPN Profile config file has been downloaded to: ${local.openvpn_user}.ovpn\"\n}\n\n# Display the next step to access the VPN server\noutput \"Next_Steps\" {\nvalue = &lt;&lt;-EOT\n    To use your OpenVPN configuration:\n    1. Download and Install the OpenVPN Connect client software on your device from here: https://openvpn.net/client/\n    2. Import the configuration file: ${local.openvpn_user}.ovpn\n    3. Connect to your VPN server\n\n    The configuration file is located at: ./${local.openvpn_user}.ovpn\nEOT\n}\n</code></pre> <p>The <code>outputs.tf</code> file defines values that will be displayed after Terraform completes its execution. In this specific file, it outputs:</p> <p>The following values will be displayed:</p> <ul> <li> <p>Public IP address of the OpenVPN server</p> </li> <li> <p>Instance ID of the server</p> </li> <li> <p>Key pair name used for SSH access</p> </li> <li> <p>Details on how to access the VPN server </p> </li> <li> <p>Path to the private key file that was created</p> </li> <li> <p>SSH connection string (ready to use command for connecting to the server)</p> </li> <li> <p>Location of the downloaded OpenVPN profile (.ovpn file)</p> </li> <li> <p>Next Steps Instructions</p> </li> </ul> <p>These outputs help users understand where important files are located and what steps to take next after the infrastructure is deployed.</p> The <code>ovpn.tf</code> file ovpn.tf <pre><code># Wait for OpenVPN installation and download the profile config file\nresource \"null_resource\" \"get_ovpn_config\" {\ndepends_on = [aws_instance.OpenVPN_Server]\n\n# Trigger this resource when instance IP changes\ntriggers = {\n    instance_ip = aws_instance.OpenVPN_Server.public_ip\n    ovpn_file  = \"${local.openvpn_user}.ovpn\"  # Store filename in triggers\n}\n\n# Wait for OpenVPN installation to complete and file to be created\nprovisioner \"remote-exec\" {\n    inline = [\n    \"while [ ! -f /home/ubuntu/${local.openvpn_user}.ovpn ]; do sleep 20; echo 'Waiting for OpenVPN config file...'; done\",\n    \"echo 'OpenVPN config file is ready!'\"\n    ]\n\n    connection {\n    type        = \"ssh\"\n    user        = \"ubuntu\"\n    private_key = tls_private_key.key_pair.private_key_pem\n    host        = aws_instance.OpenVPN_Server.public_ip\n    }\n}\n\n# Download the OpenVPN profile config file\nprovisioner \"local-exec\" {\n    command = \"scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${local_file.private_key.filename} ubuntu@${aws_instance.OpenVPN_Server.public_ip}:/home/ubuntu/${local.openvpn_user}.ovpn ./${local.openvpn_user}.ovpn\"\n}\n\n# Clean up the .ovpn file after destroy\nprovisioner \"local-exec\" {\n    when    = destroy\n    command = \"rm -f ./${self.triggers.ovpn_file}\"\n}\n}\n</code></pre> <p>The <code>ovpn.tf</code> file manages the retrieval of the OpenVPN configuration file from the remote VPN server and donwloads it in the terraform working directory. The main purpose of this file is to ensure you get the OpenVPN client configuration file automatically downloaded to your local machine once it's ready on the server.</p> <p>Here\u2019s a breakdown of each section of this file:</p> <p>Resource Definition</p> <ul> <li><code>null_resource \"get_ovpn_config\"</code>: A helper resource used to wait for the OpenVPN configuration file to be generated, then download it locally. This resource doesn't create infrastructure directly but adds automation to the deployment process.</li> </ul> <p>Dependency and Trigger Configuration</p> <ul> <li><code>depends_on = [aws_instance.OpenVPN_Server]</code>: Ensures this resource executes only after the OpenVPN server instance is successfully created.</li> <li><code>triggers</code>:  </li> <li><code>instance_ip</code>: Ensures the resource is re-applied if the public IP of the OpenVPN server changes.  </li> <li><code>ovpn_file</code>: Tracks the expected <code>.ovpn</code> configuration filename as a trigger, ensuring changes to this filename will trigger re-execution.</li> </ul> <p>Remote Execution Provisioner</p> <ul> <li><code>provisioner \"remote-exec\"</code>: Executes commands on the OpenVPN server to ensure the <code>.ovpn</code> configuration file is ready.  </li> </ul> <p><code>inline</code>: </p> <p>Contains the commands to:</p> <ul> <li><code>while [ ! -f /home/ubuntu/... ]; do</code>: Polls the server every 20 seconds, checking if the <code>.ovpn</code> file exists.  </li> <li><code>echo 'Waiting for OpenVPN config file...'</code>: Prints a message during the wait loop.  </li> <li><code>echo 'OpenVPN config file is ready!'</code>: Signals the file is available.  </li> </ul> <p><code>connection</code>: Defines SSH connection details:</p> <ul> <li><code>type</code>: Specifies SSH as the connection type.  </li> <li><code>user</code>: Specifies the user (<code>ubuntu</code>) to connect with.  </li> <li><code>private_key</code>: Uses the private key generated earlier for authentication.  </li> <li><code>host</code>: Specifies the public IP of the OpenVPN server instance.</li> </ul> <p>Local Execution Provisioner</p> <ul> <li>First <code>local-exec</code> block: Downloads the <code>.ovpn</code> file to the local machine.  </li> <li><code>scp</code>: Securely copies the file from the OpenVPN server to the local directory.  </li> </ul> <p>Options:</p> <ul> <li><code>-o StrictHostKeyChecking=no</code>: Disables host key checking to avoid interactive prompts.  </li> <li><code>-o UserKnownHostsFile=/dev/null</code>: Prevents updates to the local known hosts file.  </li> <li><code>-i</code>: Specifies the SSH private key for authentication.  </li> </ul> <p>Cleanup on Resource Destruction</p> <ul> <li>Second <code>local-exec</code> block: Deletes the downloaded <code>*.ovpn</code> file when the resource is destroyed during the terraform cleanup phase.  </li> <li><code>when = destroy</code>: Ensures the command is only executed during the resource destruction phase.  </li> <li><code>rm -f ./${self.triggers.ovpn_file}</code>: Removes the file using the name stored in the triggers.</li> </ul> <p>Overall Function</p> <p>This file ensures that the OpenVPN profile configuration file is created on the server, securely downloads it to the local system, and removes it when no longer needed (when the <code>terraform destroy</code> command is run). It integrates waiting, remote command execution, and local file operations seamlessly within the Terraform workflow.</p> The <code>provider.tf</code> file provider.tf <pre><code># \nterraform {\nrequired_providers {\n    aws = {\n    source  = \"hashicorp/aws\"\n    version = \"~&gt; 5.0\"\n    }\n    local = {\n    source  = \"hashicorp/local\"\n    version = \"~&gt; 2.0\"\n    }\n    tls = {\n    source  = \"hashicorp/tls\"\n    version = \"~&gt; 4.0\"\n    }\n    null = {\n    source  = \"hashicorp/null\"\n    version = \"~&gt; 3.0\"\n    }\n}\nrequired_version = \"&gt;= 1.2.0\"\n}\n\n# Configure the AWS Provider\nprovider \"aws\" {\nregion = \"${var.selected_region}\"\n}\n</code></pre> <p>The file essentially sets up the foundational configuration sources and versions needed for Terraform to interact with AWS and to use other necessary providers for the OpenVPN deployment. </p> The <code>securityGrp.tf</code> file securityGrp.tf <pre><code># OpenVPN Server Security Group\nresource \"aws_security_group\" \"openvpn_SG\" {\nname_prefix = \"${var.project_name}_openvpn_SG_\"\ndescription = \"OpeyemiTechPro OpenVPN Security Group\"\n\ndynamic \"ingress\" {\n    for_each = var.openvpn_tcp_ports\n    content {\n    from_port   = ingress.key\n    to_port     = ingress.key\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = ingress.value\n    }\n}\n\ndynamic \"ingress\" {\n    for_each = var.openvpn_udp_ports\n    content {\n    from_port   = ingress.key\n    to_port     = ingress.key\n    protocol    = \"udp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = ingress.value\n    }\n}  \n\negress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n}\n</code></pre> <p>This configures the required security group profile for the OpenVPN server. It opens the required ports for ingress and egress and the neccesary port protocols (tcp and udp).</p> <p>The sections of the securityGrp.tf file are explained breifly below:</p> <p>Resource Definition</p> <ul> <li><code>resource \"aws_security_group\" \"openvpn_SG\"</code>: Creates a security group in AWS to define network access rules for the OpenVPN server.</li> </ul> <p>Security Group Naming and Description</p> <ul> <li><code>name_prefix</code>: Sets a prefix for the security group name, combining the project name (<code>var.project_name</code>) with <code>_openvpn_SG_</code>. AWS appends a unique identifier to the prefix.</li> <li><code>description</code>: Provides a description for the security group, indicating its purpose (OpenVPN security).</li> </ul> <p>Dynamic Ingress Rules for TCP Ports</p> <p><code>dynamic \"ingress\"</code> (first block):</p> <ul> <li><code>for_each = var.openvpn_tcp_ports</code>: Iterates over a map of TCP ports and descriptions provided in the variable <code>var.openvpn_tcp_ports</code>.</li> </ul> <p><code>content {}</code>: Defines the content of each rule:</p> <ul> <li><code>from_port</code> and <code>to_port</code>: Sets the port range for the rule, using the key from the iteration (<code>ingress.key</code>).</li> <li><code>protocol = \"tcp\"</code>: Specifies that the rule applies to TCP traffic.</li> <li><code>cidr_blocks = [\"0.0.0.0/0\"]</code>: Allows traffic from all IP addresses.</li> <li><code>description = ingress.value</code>: Provides a description for the rule, using the value from the iteration.</li> </ul> <p>Dynamic Ingress Rules for UDP Ports</p> <p><code>dynamic \"ingress\"</code> (second block):</p> <ul> <li>Similar to the first block, but applies to UDP traffic.</li> <li>Iterates over the variable <code>var.openvpn_udp_ports</code>, which contains a map of UDP ports and their descriptions.</li> </ul> <p>Egress Rules</p> <p><code>egress</code> block:</p> <ul> <li><code>from_port = 0</code> and <code>to_port = 0</code>: Allows all outbound traffic across all port ranges.</li> <li><code>protocol = \"-1\"</code>: Applies the rule to all protocols.</li> <li><code>cidr_blocks = [\"0.0.0.0/0\"]</code>: Allows traffic to all IP addresses.</li> </ul> <p>Overall Function</p> <p>This security group:</p> <ol> <li>Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>).</li> <li>Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination.</li> <li>Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases.</li> </ol> The <code>terraform.tfvars</code> file terraform.tfvars <pre><code># Project Details\nproject_name = \"Opeyemi_OpenVPN_YT\"\n\n\n# Variables for OpenVPN Server\nOpenVPN_instance_type = \"t2.micro\"\n\n# OpenVPN Server port Details\nopenvpn_tcp_ports = {\n\"22\" = \"SSH Access\"\n\"80\"  = \"HTTP Access\"\n\"443\" = \"HTTPS Access\" \n\"943\" = \"OpenVPN Management Port\"\n}\n\nopenvpn_udp_ports = {\n\"1194\" = \"OpenVPN udp Port\"\n}\n</code></pre> <p>Here, values are assigned to all the declared variables in the config script.  You can freely change any values here to customize the script for your own purpose</p> The <code>variables.tf</code> file variables.tf <pre><code>variable \"project_name\" {\ndescription = \"Title of the Project\"\ntype        = string\n}\n\nvariable \"OpenVPN_instance_type\" {\ndescription = \"The type of EC2 instance to launch for the OpenVPN Server\"\ntype        = string\n}\nvariable \"openvpn_tcp_ports\" {\ntype = map(string)\ndescription = \"Map of OpenVPN ports to their descriptions\"\n}\n\nvariable \"openvpn_udp_ports\" {\ntype = map(string)\ndescription = \"Map of OpenVPN UDP ports to their descriptions\"\n}\n\nvariable \"aws_regions\" {\ntype = map(string)\ndefault = {\n    \"us-east-1\"      = \"N. Virginia\"\n    \"us-east-2\"      = \"Ohio\"\n    \"us-west-1\"      = \"N. California\"\n    \"us-west-2\"      = \"Oregon\"\n    \"af-south-1\"     = \"Cape Town\"\n    \"ap-east-1\"      = \"Hong Kong\"\n    \"ap-south-1\"     = \"Mumbai\"\n    \"ap-southeast-1\" = \"Singapore\"\n    \"ap-southeast-2\" = \"Sydney\"\n    \"ap-southeast-3\" = \"Jakarta\"\n    \"ap-northeast-1\" = \"Tokyo\"\n    \"ap-northeast-2\" = \"Seoul\"\n    \"ap-northeast-3\" = \"Osaka\"\n    \"ca-central-1\"   = \"Canada Central\"\n    \"ca-west-1\"      = \"Calgary\"\n    \"cn-north-1\"     = \"Beijing\"\n    \"cn-northwest-1\" = \"Ningxia\"\n    \"eu-central-1\"   = \"Frankfurt\"\n    \"eu-central-2\"   = \"Zurich\"\n    \"eu-west-1\"      = \"Ireland\"\n    \"eu-west-2\"      = \"London\"\n    \"eu-west-3\"      = \"Paris\"\n    \"eu-north-1\"     = \"Stockholm\"\n    \"eu-south-1\"     = \"Milan\"\n    \"eu-south-2\"     = \"Spain\"\n    \"me-south-1\"     = \"Bahrain\"\n    \"me-central-1\"   = \"UAE\"\n    \"sa-east-1\"      = \"S\u00e3o Paulo\"\n    \"il-central-1\"   = \"Tel Aviv\"\n}\n}\n\nvariable \"selected_region\" {\ntype        = string\ndescription = \"Enter the AWS region where you want to deploy your OpenVPN Server and press Enter:\"\n\nvalidation {\n    condition     = can(regex(\"^(eu|us|ap|ca|sa|me|af|il|cn)-(central|west|east|north|south|southeast|northeast|northwest)-[1-3]$\", var.selected_region))\n    error_message = \"Please select a valid AWS region from the provided list.\"\n}\n}\n</code></pre> <p>The <code>variables.tf</code> file is used to define variables that make the configuration more dynamic and reusable. By abstracting values into variables, I can easily customize the infrastructure without directly modifying the configuration files.</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#setting-the-script-options","title":"Setting the script options","text":"<p>The script allows you to set some options based on your use case. These are the available options you can set:</p> <ul> <li> project_name - This is used for labelling purposes only. It is appended to the resource tags</li> <li> OpenVPN_instance_type - This has been set to <code>t2-micro</code> so the setup remains within the AWS free-tier plan.  You can change this to any suitable instance type but a t2-micro will server in most situations</li> <li> openvpn_user - This is the username used to create the <code>*.ovpn</code> profile file on the VPN server. The profile name is displayed when you connect through the OpenVPN client. It is currently set to append the selected AWS region so you can easily know which region you are connected to.</li> <li> selected_region - this option is set at runtime and it is required for the script to run. Here you select the AWS region where you want your server to be hosted.  The region you select will determine where your VPN traffic is routed through. For example, if you select <code>ca-central-1</code>, your VPN traffic will be routed through the AWS Canada Central IP address and as such your public IP address will read \"Quebec, Montreal, Canada\" </li> </ul> <p></p> <p>Public IP address showing Canada</p> <p>The list of acceptable AWS regions are shown here</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#_1","title":"10-Microservices CI-CD Deployment","text":"","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#install-and-setup-prometheus-stack-on-eks-using-helm","title":"Install and setup Prometheus Stack on EKS using Helm","text":"","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#install-helm","title":"Install Helm","text":"<pre><code>curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#check-helm-version","title":"Check Helm version","text":"<pre><code>helm version\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#add-helm-repo","title":"Add Helm repo","text":"<pre><code>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\nhelm repo update\n</code></pre> <p>(Optionally) Search Available Hem Charts <pre><code>helm search repo prometheus-community\n</code></pre></p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#create-namespace","title":"create namespace","text":"<pre><code>kubectl create namespace monitoring\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#install-prometheus-stack-into-monitoring-namespace","title":"Install Prometheus Stack into monitoring namespace","text":"<pre><code>helm install prometheus prometheus-community/kube-prometheus-stack \\\n  -n monitoring \\\n  --set prometheus.prometheusSpec.maximumStartupDurationSeconds=300 \\\n  --set alertmanager.persistence.storageClass=\"gp2\" \\\n  --set server.persistentVolume.storageClass=\"gp2\"\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#check-running-status-of-pods-to-verify-deployment","title":"Check running status of pods to verify deployment","text":"<pre><code>kubectl --namespace monitoring get pods -l \"release=prometheus\"\n</code></pre> <p>OR <pre><code>kubectl get pods -n monitoring\n</code></pre></p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#list-all-svc-in-the-monitoring-namespace","title":"List all svc in the monitoring namespace","text":"<pre><code>kubectl get svc -n monitoring\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#display-grafana-url-optional","title":"Display Grafana URL (optional)","text":"<pre><code>kubectl get svc -n monitoring prometheus-grafana\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#display-prometheus-url-optional","title":"Display Prometheus URL (optional)","text":"<pre><code>kubectl get svc -n monitoring prometheus-kube-prometheus-prometheus\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#change-grafana-service-type-from-clusterip-to-loadbalancer-to-expose-for-external-access","title":"Change Grafana Service Type from ClusterIP to LoadBalancer to expose for external access","text":"<pre><code>kubectl patch svc prometheus-grafana \\\n  -n monitoring \\\n  -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#change-prometheus-service-type-from-clusterip-to-loadbalancer-to-expose-for-external-access","title":"Change Prometheus Service Type from ClusterIP to LoadBalancer to expose for external access","text":"<pre><code>kubectl patch svc prometheus-kube-prometheus-prometheus \\\n  -n monitoring \\\n  -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#display-loadbalancer-url-for-grafana-and-prometheus-wait-for-the-external-ip-field-to-be-populated-then-open-that-ip-in-your-browser-grafana-on-port-80-prometheus-on-port-9090","title":"Display LoadBalancer URL for Grafana and Prometheus. Wait for the EXTERNAL-IP field to be populated, then open that IP in your browser (Grafana on port 80, Prometheus on port 9090)","text":"<pre><code>kubectl get svc -n monitoring\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#get-grafana-password-by-running","title":"Get Grafana password by running:","text":"<pre><code>kubectl --namespace monitoring get secrets prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 -d ; echo\n</code></pre> <ul> <li>Username is <code>admin</code></li> </ul>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#install-configure-node-exporter-on-linux","title":"Install &amp; Configure Node-Exporter on linux","text":"<pre><code>#!/bin/bash\n\nset -e\n\nNODE_EXPORTER_VERSION=\"1.8.1\"\nDOWNLOAD_URL=\"https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz\"\n\necho \"\ud83d\ude80 Installing Node Exporter v${NODE_EXPORTER_VERSION}...\"\n\n# Download and extract\ncurl -LO ${DOWNLOAD_URL}\ntar -xzf node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz\nsudo mv node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64/node_exporter /usr/local/bin/\nrm -rf node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64*\n\n# Create user\nsudo useradd -rs /bin/false node_exporter || true\n\n# Create systemd service\ncat &lt;&lt;EOF | sudo tee /etc/systemd/system/node_exporter.service\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=node_exporter\nGroup=node_exporter\nType=simple\nExecStart=/usr/local/bin/node_exporter\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Reload and start\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter\n\n\n# Verify\necho \"\u2705 Node Exporter is running!\"\ncurl -s http://localhost:9100/metrics | head -n 5\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#to-scrape-metrics-from-a-standalone-linux-server-running-node_exporter-using-a-prometheus-instance-running-inside-eks","title":"To Scrape metrics from a standalone Linux server running node_exporter using a Prometheus instance running inside EKS","text":"","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#prerequisites","title":"\u2705 Prerequisites:","text":"<ul> <li>Prometheus is installed via Helm chart (likely the kube-prometheus-stack).</li> <li>node_exporter is running and accessible on the Linux server (default port: 9100).</li> <li>The Linux server's IP address is publicly accessible or reachable from within the EKS cluster (e.g., via VPC Peering, VPN, or internal networking).</li> <li>Security Groups and firewall rules allow traffic from EKS nodes to port <code>9100</code> on the standalone server.</li> </ul>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#steps-to-add-standalone-server-to-prometheus-scrape-targets","title":"\ud83d\ude80 Steps to Add Standalone Server to Prometheus Scrape Targets:","text":"<ol> <li>Create Additional Scrape Config via Secret</li> <li>Create a file named <code>additional-scrape-configs.yaml</code> with the following content:</li> </ol> <pre><code>- job_name: 'jenkins-node-exporter'\n  static_configs:\n    - targets: ['&lt;server_ip&gt;:9100']\n      labels:\n        instance: '&lt;instance_name&gt;'\n        role: 'node-exporter'\n        environment: 'dev'\n\n- job_name: 'jenkins-prom-plugin'\n  metrics_path: /prometheus\n  static_configs:\n    - targets: ['&lt;server_ip&gt;:8080']\n      labels:\n        instance: 'instance_name'\n        role: 'jenkins-master'\n        environment: 'dev'\n</code></pre> <p>Replace <code>&lt;server-ip&gt;</code> with the IP address or DNS name of your standalone Linux server.</p> <ol> <li>Now create a Kubernetes secret:</li> </ol> <pre><code>kubectl create secret generic additional-scrape-configs \\\n  --from-file=additional-scrape-configs.yaml \\\n  -n monitoring\n</code></pre> <ol> <li> <p>Edit Prometheus Custom Resource</p> </li> <li> <p>First get the prometheus resource name</p> </li> </ol> <pre><code>kubectl get prometheus -n monitoring\n</code></pre> <ul> <li>Then edit the prometheus custom resource</li> </ul> <pre><code>kubectl edit prometheus prometheus-kube-prometheus-prometheus -n monitoring\n</code></pre> <p>Under <code>spec</code> add:</p> <pre><code>  additionalScrapeConfigs:\n    name: additional-scrape-configs\n    key: additional-scrape-configs.yaml\n</code></pre> <p>So the result should look like this:</p> <pre><code>spec:\n  ...\n  additionalScrapeConfigs:\n    name: additional-scrape-configs\n    key: additional-scrape-configs.yaml\n</code></pre> <ol> <li>Apply and Verify</li> </ol> <p>Prometheus will reload its config automatically by deafult. Wait a minute, then:</p> <ul> <li>Go to the Prometheus UI (<code>/targets</code> page).</li> <li>Look for the job <code>node-exporter-standalone</code>.</li> <li>Ensure it\u2019s marked as UP.</li> </ul> <p></p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#to-uninstall-prometheus-stack-and-delete-namespace","title":"To Uninstall Prometheus-Stack and delete namespace","text":"<pre><code>helm uninstall prometheus -n monitoring\nkubectl delete namespace monitoring\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#_2","title":"10-Microservices CI-CD Deployment","text":"","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#running-the-script","title":"Running the script","text":"<p>Follow the \"Quick Start Guide\" below to provision and configure your OpenVPN server and to connect to your new VPN network.</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#quick-start-guide","title":"Quick Start Guide","text":"Click here for a quick start guide on setting up the OpenVPN Access Server","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#clone-the-repository","title":"Clone the Repository","text":"<p>Create a folder on your local machine and clone the repository in the folder</p> <pre><code>git clone https://github.com/opeyemitechpro/OpenVPN-Terraform.git\n</code></pre>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#initialize-the-terraform-configuration","title":"Initialize the terraform configuration","text":"<p>From within the cloned directory, initialize the terraform configuration</p> <pre><code>terraform init\n</code></pre> <p></p> <p>Terraform Initialiaztion Command</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#apply-the-terraform-configuration","title":"Apply the Terraform Configuration","text":"<pre><code>terraform apply -auto-approve\n</code></pre> <ul> <li>When prompted, enter an AWS region from the list below and press enter.  (e.g. <code>us-west-2</code>)</li> <li>This will be the AWS region where the VPN server and all resources will be hosted. </li> </ul> <p>Terraform apply command</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#list-of-accepted-aws-regions","title":"List of accepted AWS regions","text":"<ul> <li>us-east-1       =  N. Virginia </li> <li>us-east-2       =  Ohio </li> <li>us-west-1       =  N. California </li> <li>us-west-2       =  Oregon </li> <li>af-south-1      =  Cape Town </li> <li>ap-east-1       =  Hong Kong </li> <li>ap-south-1      =  Mumbai </li> <li>ap-southeast-1  =  Singapore </li> <li>ap-southeast-2  =  Sydney </li> <li>ap-southeast-3  =  Jakarta </li> <li>ap-northeast-1  =  Tokyo </li> <li>ap-northeast-2  =  Seoul </li> <li>ap-northeast-3  =  Osaka </li> <li>ca-central-1    =  Canada Central </li> <li>eu-central-1    =  Frankfurt </li> <li>eu-west-1       =  Ireland </li> <li>eu-west-2       =  London </li> <li>eu-west-3       =  Paris </li> <li>eu-north-1      =  Stockholm </li> <li>eu-south-1      =  Milan </li> <li>eu-south-2      =  Zurich </li> <li>me-south-1      =  Bahrain </li> <li>me-central-1    =  UAE </li> <li>sa-east-1       =  S\u00e3o Paulo </li> </ul>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#outputs","title":"Outputs","text":"<p>At the end of the terraform apply command, the script outputs the following details on the screen:</p> <ul> <li>The Public IP address of the VPN Server</li> <li>The instance-ID</li> <li>The name of the keypair created</li> <li>The path where the private key file was saved on your local machine</li> <li>SSH connection string that you can use to the VPN server</li> <li>The OpenVPN profile file that you will use to ssh into the VPN server</li> <li>Further steps to launch your VPN connection</li> </ul> <p></p> <p>Terraform Output Screen</p> <p>Showing the OpenVPN server on the AWS EC2 Console </p> <p>AWS Console Showing the OpenVPN Server details</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#connect-to-your-vpn","title":"Connect to your VPN","text":"<ul> <li>Download and install OpenVPN Connect client on your local machine</li> <li>Import the <code>*.ovpn</code> file into the OpenVPN cient appllication</li> <li>Connect to your VPN network</li> </ul> <p>OpenVPN Client Connected to the VPN</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#testing-your-vpn-connection","title":"Testing your VPN Connection","text":"<p>One very simple way to check if you are actually connected to your new VPN network is to open your browser and check your public IP address. You can use websites like whatsmyip.com or simply search \"what is my ip address\" on Google to check your public IP address.  </p> <p></p> <p>Public IP address showing Canada</p> <p>When you are connected to your VPN server, your internet traffic will be routed through your VPN server and as such, only your VPN server IP address will be seen publicly, your local ISP assigned ip address will be hidden from the internet. </p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#cleanup","title":"Cleanup","text":"<p>To delete the server and cleanup all resources that were created.</p> <ol> <li> <p>First disconnect the OpenVPN Connect Client</p> </li> <li> <p>Then enter the command below to delete all locally created files and also delete the server and all other resources from your AWS account.  </p> </li> </ol> <pre><code>terraform destroy -auto-approve \n</code></pre> <ul> <li>This will terminate the EC2 instance and delete all resources created and also delete the files that were locally created in the terraform working directory i.e. the *.ovpn user profile and the keypair file that was created earlier </li> </ul> <p></p> <p>Terraform Destroy Command</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#use-cases","title":"Use Cases","text":"<p>This self-hosted OpenVPN solution offers flexibility, control, and enhanced security compared to commercial VPN services. Here are some possible use cases:  </p> <p>1. Secure Remote Access - Corporate Network Access: Allow employees to securely connect to on-premises resources or internal systems. - Remote Development: Enable developers to work on private servers or cloud environments without exposing them to the public internet.  </p> <p>2. Privacy and Anonymity - Encrypt Internet Traffic: Protect personal or organizational internet traffic, especially when using public Wi-Fi. - Location Masking: Access the internet as if from a specific location to bypass geolocation restrictions.  </p> <p>3. Secure Inter-Office Communication - Branch Office Connectivity: Connect multiple office locations securely over a shared network. - IoT Devices: Secure communication for IoT devices spread across different sites.  </p> <p>4. Personal Use - Ad-Free Browsing: Avoid invasive tracking and ads by routing traffic through your onw self-hosted VPN server. - Bypass ISP Throttling: Prevent internet service providers from throttling bandwidth for specific services.  </p> <p>5. Development and Testing - Environment Testing: Simulate network environments for application development and QA testing. - Access Restricted APIs: Connect securely to APIs or other restricted services during development.  </p> <p>6. Secure Cloud Resources - Private Cloud Access: Connect securely to AWS resources without exposing them to the public internet. - DevOps Pipelines: Ensure secure deployment pipelines that require private network connectivity.  </p> <p>7. Enhanced Security - Multi-Layered Security: Combine a self-hosted VPN with firewalls or IDS/IPS systems to add another layer of protection. - Self-Controlled Data: Prevent third-party logging or tracking of your internet activity.  </p> <p>8. Education and Research - Bypass Censorship: Enable access to academic resources or restricted sites in regions with strict censorship. - Research Anonymity: Conduct secure and private research online.  </p> <p>9. Cost Efficiency - Avoiding Commercial VPN Costs: Reduce long-term expenses for secure connections, especially for teams or organizations. - No User Limits: Create a solution tailored to your usage, avoiding per-user or bandwidth fees common with commercial VPNs.  </p> <p>10. Gaming and Media - LAN Gaming: Create a virtual local area network for multiplayer gaming. - Bypass Regional Blocks: Access region-restricted content like streaming services.  </p> <p>By usign this solution to host your own VPN, you gain complete control over configuration, logs, and data flow, making it an excellent choice for your specific use case.</p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"devops_projects/10micro/#conclusion","title":"Conclusion","text":"<p>Setting up a self-hosted VPN server using this Terraform configuration script is a straightforward and efficient way to enhance your network security and maintain control over your data. By following this documentation, you can deploy a robust OpenVPN server on AWS, customize it to your needs, and ensure private and secure internet access. This guide aims to empower you with the knowledge and tools to manage your own VPN server effectively. For any troubleshooting or further customization, explore the Terraform and OpenVPN documentation for advanced insights and solutions. </p>","tags":["AWS","DevOps","Kubernetes"]},{"location":"kb/","title":"Knowledge Base","text":"","tags":["Knowledge Base"]},{"location":"kb/#welcome-to-the-knowledge-base","title":"Welcome to the Knowledge Base","text":"","tags":["Knowledge Base"]},{"location":"terraform_projects/","title":"Terraform Projects","text":"<p>This section contains index of terraform projects in this documentation</p> <ul> <li> <p> OpenVPN Access Server Setup On AWS Using Terraform</p> <p>How To Setup and Host Your Own Free VPN Server on AWS Using Terraform and OpenVPN</p> <p> Click Here</p> </li> <li> <p> OpenVPN Access Server Setup On AWS Using Terraform</p> <p>How To Setup and Host Your Own Free VPN Server on AWS Using Terraform and OpenVPN</p> <p> Click Here</p> </li> </ul>","tags":["Terraform"]},{"location":"terraform_projects/openvpn_access_server/","title":"DIY Project - OpenVPN Access Server Setup Using Terraform","text":"","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#setup-and-host-your-own-free-vpn-server-on-aws-using-terraform-and-openvpn","title":"Setup and Host Your Own Free VPN Server on AWS Using Terraform and OpenVPN","text":"<p>In this mini-project, I will demonstrate how to setup and self-host a VPN server on AWS using terraform and OpenVPN Access Server.</p> Watch the Video - How To Create a Free Self-Hosted VPN Server on AWS using Terraform and OpenVPN <p> </p> <p>How to Create a Free Self-Hosted VPN Server on AWS using Terraform and OpenVPN</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#introduction","title":"Introduction","text":"<p>Setting up a self-hosted VPN server can be a cost-effective and secure solution for personal or organizational needs. This documentation provides a step-by-step guide on using a Terraform configuration script to deploy an OpenVPN Access server on AWS.  With this guide, you'll learn how to configure the script, customize it for your requirements, and launch a fully functional VPN server in less than 5-minutes and ensures your internet traffic remains private and encrypted without been locked in a vpn subscription plan. This VPN server is also \"disposable\", meaning, you can create and delete it anytime after use with just one command  </p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#pre-requisites","title":"Pre-requisites","text":"<ul> <li> AWS account (free tier account will work)</li> <li> Terraform installed on local machine (How to Install Terraform)</li> <li> OpenVPN Connect Client software installed on local machine (download from here)</li> <li> Your AWS access key ID and secret access key (learn how to get your AWS access keys here)</li> <li> AWS CLI installed and configured with your AWS access key ID and Secret access keys (learn more about AWS CLI here) </li> <li> <p> The OpenVPN-Terraform Setup Script (click the button below)</p> <p> OpenVPN-Terraform Source Code  </p> </li> </ul>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#what-this-terraform-configuration-script-does","title":"What this Terraform Configuration Script Does","text":"<p>This terraform configuration creates a fully functional, free and ready-to-use self-hosted OpenVPN Server in any chosen AWS region. The script perfomes the following operations:</p> <ul> <li>Creates a Ubuntu 22.04 EC2 instance and configures a fully functional OpenVPN Access Server on it</li> <li>Configures the server as a type t2-micro instance so that it can run within the AWS Free-tier plan (Learn more about the AWS free-tier plan here)</li> <li>Sets up and configures the VPN server with an IP address in the specified AWS region.</li> <li>Generates an AWS keypair file for optional SSH connection to the EC2 instance, downloads the file and saves it in the terraform working directory on your local machine. The chosen AWS region is appended to the name of the keypair file.</li> <li>Generates an OpenVPN User Profile file (*.ovpn) that will be used to authenticate and establish an encrypted VPN connection from your local machine to the VPN server. The OpenPVN User Profile file is also donwloaded and saved to the terraform working directory on your local machine.</li> <li>One command tear down that destroys and cleans up the whole infrastructure along with the locally created files (the keypair file and the *.ovpn user profile file)</li> </ul>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#how-the-terraform-configuration-script-works","title":"How the Terraform Configuration Script works","text":"<p>Technical details about how the terraform script works is described below:</p> Click here to see details of how the OpenVPN Terraform config works under the hood <p> OpenVPN-Terraform Source Code  </p> <p>Each of the files in  this terraform configuration module is explained below:</p> The <code>ami.tf</code> file ami.tf <pre><code># Select latest Ubuntu 22.04 ami \n\ndata \"aws_ami\" \"ubuntu\" {\nmost_recent = true\n\nfilter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n} # (1)!\n\nfilter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n} # (2)!\n\nowners = [\"099720109477\"]  # Canonical's AWS account ID\n} # (3)!\n</code></pre> <ol> <li>Lines 6-9 filters the name of the ami \"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"</li> <li>Lines 11-14 filters the virtualization type of the ami</li> <li>Line 16 filters the AWS account ID of the ami publisher - Canonical</li> </ol> <p>This <code>ami.tf</code> is used to find the latest Ubuntu 22.04 AMI (Amazon Machine Image) from the AWS ami Catalog. </p> <ul> <li> <p>It creates a data source named \"ubuntu\" that searches for AMIs with these criteria:</p> <ul> <li> <p>Uses most_recent = true to get the latest version</p> </li> <li> <p>Filters for Ubuntu 22.04 (Jammy Jellyfish) images using the name pattern</p> </li> <li> <p>Ensures it's using HVM (Hardware Virtual Machine) virtualization</p> </li> <li> <p>Only looks for images owned by Canonical (Ubuntu's publisher) using their AWS account ID (099720109477)</p> </li> </ul> </li> </ul> <p>This prevents hardcoding a specific AMI ID into the script, which could become outdated. The AMI ID is then referenced elsewhere in the Terraform code using <code>data.aws_ami.ubuntu.id</code></p> The <code>OpenVPN_ec2.tf</code> file OpenVPN_ec2.tf <pre><code>resource \"aws_instance\" \"OpenVPN_Server\" {\nami                     = data.aws_ami.ubuntu.id\ninstance_type           = var.OpenVPN_instance_type\nvpc_security_group_ids  = [ aws_security_group.openvpn_SG.id ]\nuser_data               = templatefile(\"./openvpn_userdata.tpl\", {openvpn_user = local.openvpn_user})\nkey_name                = aws_key_pair.key_pair.key_name\n\nroot_block_device {\n    volume_size           = 8\n}\n\n# Set the metadata service to allow IMDSv2\nmetadata_options {\n    http_tokens                 = \"optional\"    # Allows IMDSv1 and IMDSv2\n    http_put_response_hop_limit = 1      # Default hop limit for the PUT request\n    http_endpoint               = \"enabled\"     # Enable metadata service\n}\n\ntags = {\n    Name = \"${var.project_name}_Server\"\n    Region    = var.selected_region\n    KeyPair   = local.key_pair_name\n    Project   = var.project_name\n}\n\n}\n\nlocals {\n# Create key name with OpenVPN-Keypair prefix and region\nkey_pair_name = \"OpenVPN-Keypair-${var.selected_region}\"\n\n# Create Profile name for the OpenVPN User\nopenvpn_user = \"OpeyemiTechPro-${var.selected_region}\"\n\n# Display formatted region information\nregion_display = join(\"\\n\", [for region, location in var.aws_regions : format(\"%s = %s\", region, location)])\n\n}\n\n\n# Generate a private key\nresource \"tls_private_key\" \"key_pair\" {\nalgorithm = \"RSA\"\nrsa_bits  = 2048\n}\n\n# Create key pair in AWS\nresource \"aws_key_pair\" \"key_pair\" {\nkey_name   = local.key_pair_name\npublic_key = tls_private_key.key_pair.public_key_openssh\n\n# tag the key pair\ntags = {\n    Name        = local.key_pair_name\n    Region      = var.selected_region\n    Project     = var.project_name\n    CreatedBy   = \"Terraform\"\n}\n}\n\n# Save private key locally\nresource \"local_file\" \"private_key\" {\ncontent         = tls_private_key.key_pair.private_key_pem\nfilename        = \"${local.key_pair_name}.pem\"\nfile_permission = \"0400\"\n}\n\n\n# Create a null resource to display available regions\nresource \"null_resource\" \"region_display\" {\ntriggers = {\n    always_run = timestamp()\n}\n\nprovisioner \"local-exec\" {\n    command = &lt;&lt;-EOT\n    echo \"Available AWS Regions:\"\n    echo \"${local.region_display}\"\n    echo \"\\nSelected Region: ${var.selected_region} (${var.aws_regions[var.selected_region]})\"\n    EOT\n}\n}\n</code></pre> <p>This is the main config file that sets up the OpenVPN server infrastructure.</p> <ul> <li> <p>It reates an EC2 instance for the OpenVPN server with the specified configurations (using Ubuntu AMI selected above)</p> </li> <li> <p>Sets up a key pair for SSH access</p> </li> <li> <p>Configures the instance metadata options so it can be queried by the user_data script</p> </li> <li> <p>Creates and saves an RSA private key locally</p> </li> <li> <p>Includes tags for resource management</p> </li> <li> <p>Sets the connection profile name for the VPN server</p> </li> <li> <p>Displays available AWS regions through a null resource and determines the selected region during execution</p> </li> </ul> <p>Each code section is explained breifly below:</p> <p>aws_instance Resource </p> <p>This resource defines the EC2 instance for the OpenVPN server.  </p> <ul> <li><code>ami</code>: Uses the ID of a specific Ubuntu AMI fetched via a data source.  </li> <li><code>instance_type</code>: Sets the EC2 instance type, determined by a variable (<code>var.OpenVPN_instance_type</code>).  </li> <li><code>vpc_security_group_ids</code>: Attaches the instance to a specific security group (<code>aws_security_group.openvpn_SG</code>).  </li> <li><code>user_data</code>: Provides initialization commands for the instance via a template file. Custom variables, such as <code>openvpn_user</code>, are passed to the template.  </li> <li><code>key_name</code>: Associates the instance with an SSH key pair created earlier.  </li> <li><code>root_block_device</code>: Defines the root storage for the instance, setting its size to 8 GB.  </li> <li><code>metadata_options</code>: Configures the EC2 metadata service to support both IMDSv1 and IMDSv2 for instance metadata retrieval.  </li> <li><code>tags</code>: Adds custom tags to the instance for identification, including project and region details.</li> </ul> <p>locals Block </p> <p>Defines reusable local variables and values for the configuration.  </p> <ul> <li><code>key_pair_name</code>: Constructs a unique key name with a prefix and region.  </li> <li><code>openvpn_user</code>: Creates a unique username for OpenVPN based on the region.  </li> <li><code>region_display</code>: Formats a list of available AWS regions for display purposes.  </li> </ul> <p>tls_private_key Resource </p> <p>Generates a 2048-bit RSA private key used to create an AWS key pair.  </p> <p>aws_key_pair Resource </p> <p>Creates an SSH key pair in AWS.  </p> <ul> <li><code>key_name</code>: Uses the locally defined key pair name.  </li> <li><code>public_key</code>: Sets the public key from the generated private key.  </li> <li><code>tags</code>: Adds metadata for the key pair, such as the project name and creation method.  </li> </ul> <p>local_file Resource </p> <p>Stores the generated private key securely on the local machine.  </p> <ul> <li><code>content</code>: Saves the private key in PEM format.  </li> <li><code>filename</code>: Names the file using the key pair name and <code>.pem</code> extension.  </li> <li><code>file_permission</code>: Sets restrictive permissions (<code>0400</code>) for security.  </li> </ul> <p>null_resource for Region Display </p> <p>A helper resource to print available AWS regions to the console.  </p> <ul> <li><code>triggers</code>: Ensures the resource runs every time by using the current timestamp.  </li> <li><code>provisioner \"local-exec\"</code>: Executes a script that prints available AWS regions and the selected region's details.  </li> </ul> The <code>openvpn_userdata.tpl</code> file openvpn_userdata.tpl <pre><code>#!/bin/bash\n\n# Bash script to intialize OpenVPN Server\n\n# Set error trap to exit the script immediately on first error.\nset -e \n\n# Log all output to a file for reference \nexec &gt;&gt; /var/log/setup_script.log 2&gt;&amp;1\n\necho \"Initializing script...\"\necho\necho \"Updating packages...\"\nsudo apt update -y\necho\necho \"Setting FQDN  &amp; Public IP\"\necho\nFQDN=$(curl -sS http://169.254.169.254/latest/meta-data/public-hostname)\nPUB_IP=$(curl -sS http://169.254.169.254/latest/meta-data/public-ipv4)\n\n\necho \"$FQDN\"\necho\necho \"$PUB_IP\"\necho \necho \"Download installation script\"\necho\n# Check Agristan's repo for full details on installation script options- https://github.com/angristan/openvpn-install\n\nwget https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh -O openvpn-install.sh\nchmod +x openvpn-install.sh \n\necho \"Installing OpenVPN Access Server...\"\necho\nsudo AUTO_INSTALL=y \\\n    APPROVE_IP=$PUB_IP \\\n    ENDPOINT=$FQDN \\\n    CLIENT=${openvpn_user} \\\n    ./openvpn-install.sh\n\n\necho \"Moving User Profile ${openvpn_user}.ovpn to the Ubuntu user home directory...\"\necho\nmv /root/${openvpn_user}.ovpn /home/ubuntu/${openvpn_user}.ovpn\n\necho\necho \"Hurray! OpenVPN Installed succesfully\"\n\n# Rename Hostname\necho \"Set hostname as OpenVPN-Server...\"\nsudo hostnamectl set-hostname OpenVPN-Server \n</code></pre> <p>This is the userdata script that is used to bootstrap the server immediately after it is provisioned by Terraform. It is configured as a template file so that terraform can interpolate the value of <code>openvpn_user</code> variable from the variables declared in the config file into the user_data script.</p> <p>How it works:</p> <ul> <li> <p>Sets bash environment and error handling</p> </li> <li> <p>Captures all the setup process in the log file <code>/var/log/setup_script.log</code> so it can be referenced if there are errors </p> </li> <li> <p>Updates system packages</p> </li> <li> <p>Retrieves instance metadata (FQDN and Public IP) from AWS metadata service which will be needed by the OpenVPN installatin script</p> </li> <li> <p>Downloads the installation script from Angristan's GitHub repository  and sets the executable permissions on the file</p> </li> <li> <p>Runs the installation script configuration automatically without prompts using the \"Public IP\" and \"FQDN\" values queried from the instance metadata</p> </li> <li> <p>Sets the Custom client name (from variable ${openvpn_user})</p> </li> <li> <p>Moves the generated client profile (.ovpn file) to Ubuntu user's home directory</p> </li> <li> <p>Sets the system hostname to \"OpenVPN-Server\"</p> </li> </ul> <p>Each section of the file is explained below:</p> <p>Shebang and Setup </p> <ul> <li><code>#!/bin/bash</code>: Specifies the script should run using the Bash shell.  </li> <li><code>set -e</code>: Ensures the script exits immediately if any command fails, preventing incomplete setups.  </li> <li><code>exec &gt;&gt; /var/log/setup_script.log 2&gt;&amp;1</code>: Redirects all script output (standard and error) to a log file for debugging and reference.</li> </ul> <p>Logging Initialization and Updates </p> <ul> <li><code>echo \"Initializing script...\"</code>: Provides a visual indicator that the script has started.  </li> <li><code>sudo apt update -y</code>: Updates package lists to ensure the system has the latest available versions.</li> </ul> <p>Retrieve and Display Instance Metadata </p> <ul> <li><code>FQDN=$(curl -sS http://169.254.169.254/latest/meta-data/public-hostname)</code>: Retrieves the Fully Qualified Domain Name (FQDN) of the instance from AWS metadata.  </li> <li><code>PUB_IP=$(curl -sS http://169.254.169.254/latest/meta-data/public-ipv4)</code>: Retrieves the public IPv4 address of the instance from AWS metadata.  </li> <li><code>echo \"$FQDN\"</code> &amp; <code>echo \"$PUB_IP\"</code>: Prints the FQDN and public IP to the console for verification.</li> </ul> <p>Download and Prepare OpenVPN Installation Script </p> <ul> <li><code>wget https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh -O openvpn-install.sh</code>: Downloads the OpenVPN installation script from Angristan\u2019s GitHub repository.  </li> <li><code>chmod +x openvpn-install.sh</code>: Makes the script executable.</li> </ul> <p>Install OpenVPN </p> <ul> <li><code>sudo AUTO_INSTALL=y \\</code>: Enables automatic installation with predefined options.  </li> <li><code>APPROVE_IP=$PUB_IP \\</code>: Uses the retrieved public IP for OpenVPN configuration.  </li> <li><code>ENDPOINT=$FQDN \\</code>: Sets the FQDN as the server endpoint.  </li> <li><code>CLIENT=${openvpn_user} \\</code>: Configures the OpenVPN client with a specified username.  </li> <li><code>./openvpn-install.sh</code>: Executes the installation script.</li> </ul> <p>Move User Configuration File </p> <ul> <li><code>mv /root/${openvpn_user}.ovpn /home/ubuntu/${openvpn_user}.ovpn</code>: Moves the generated client profile (<code>.ovpn</code> file) to the default user\u2019s home directory for easier access.</li> </ul> <p>Post-Installation Messages and Cleanup </p> <ul> <li><code>echo \"Hurray! OpenVPN Installed successfully\"</code>: Prints a success message to indicate completion.  </li> <li><code>sudo hostnamectl set-hostname OpenVPN-Server</code>: Changes the system\u2019s hostname to \"OpenVPN-Server\" for easy identification.</li> </ul> The <code>outputs.tf</code> file outputs.tf <pre><code># Output values for OpenVPN Server\noutput \"OpenVPN-Public-ip-address\" {\ndescription = \"Public ip address of the OpenVPN server\"\nvalue = aws_instance.OpenVPN_Server.public_ip\n}\n\n# Display the instance-ID of the OpenVPN Server\noutput \"OpenVPN-instance-id\" {\ndescription = \"Instance id of the OpenVPN Server\"\nvalue = aws_instance.OpenVPN_Server.id\n}\n\n# Display the instance-ID of the OpenVPN Server\noutput \"key_pair_name\" {\ndescription = \"Name of the created key pair\"\nvalue       = local.key_pair_name\n}\n\n# Display the path of the private key file\noutput \"private_key_path\" {\ndescription = \"Path to the private key file\"\nvalue       = local_file.private_key.filename\n}\n\n# Dispaly the ssh connection string\noutput \"ssh_connection_string\" {\ndescription = \"SSH connection string\"\nvalue       = \"ssh -i ${local_file.private_key.filename} ubuntu@${aws_instance.OpenVPN_Server.public_ip}\"\n}\n\n# Display the path of the downloaded ovpn profile config file\noutput \"ovpn_config_path\" {\nvalue       = \"./${local.openvpn_user}.ovpn\"\ndescription = \"Path to the downloaded OpenVPN config file\"\n}\n\n# Display the path of the downloaded ovpn profile config fil\noutput \"ovpn_download_complete\" {\nvalue = \"OpenVPN Profile config file has been downloaded to: ${local.openvpn_user}.ovpn\"\n}\n\n# Display the next step to access the VPN server\noutput \"Next_Steps\" {\nvalue = &lt;&lt;-EOT\n    To use your OpenVPN configuration:\n    1. Download and Install the OpenVPN Connect client software on your device from here: https://openvpn.net/client/\n    2. Import the configuration file: ${local.openvpn_user}.ovpn\n    3. Connect to your VPN server\n\n    The configuration file is located at: ./${local.openvpn_user}.ovpn\nEOT\n}\n</code></pre> <p>The <code>outputs.tf</code> file defines values that will be displayed after Terraform completes its execution. In this specific file, it outputs:</p> <p>The following values will be displayed:</p> <ul> <li> <p>Public IP address of the OpenVPN server</p> </li> <li> <p>Instance ID of the server</p> </li> <li> <p>Key pair name used for SSH access</p> </li> <li> <p>Details on how to access the VPN server </p> </li> <li> <p>Path to the private key file that was created</p> </li> <li> <p>SSH connection string (ready to use command for connecting to the server)</p> </li> <li> <p>Location of the downloaded OpenVPN profile (.ovpn file)</p> </li> <li> <p>Next Steps Instructions</p> </li> </ul> <p>These outputs help users understand where important files are located and what steps to take next after the infrastructure is deployed.</p> The <code>ovpn.tf</code> file ovpn.tf <pre><code># Wait for OpenVPN installation and download the profile config file\nresource \"null_resource\" \"get_ovpn_config\" {\ndepends_on = [aws_instance.OpenVPN_Server]\n\n# Trigger this resource when instance IP changes\ntriggers = {\n    instance_ip = aws_instance.OpenVPN_Server.public_ip\n    ovpn_file  = \"${local.openvpn_user}.ovpn\"  # Store filename in triggers\n}\n\n# Wait for OpenVPN installation to complete and file to be created\nprovisioner \"remote-exec\" {\n    inline = [\n    \"while [ ! -f /home/ubuntu/${local.openvpn_user}.ovpn ]; do sleep 20; echo 'Waiting for OpenVPN config file...'; done\",\n    \"echo 'OpenVPN config file is ready!'\"\n    ]\n\n    connection {\n    type        = \"ssh\"\n    user        = \"ubuntu\"\n    private_key = tls_private_key.key_pair.private_key_pem\n    host        = aws_instance.OpenVPN_Server.public_ip\n    }\n}\n\n# Download the OpenVPN profile config file\nprovisioner \"local-exec\" {\n    command = \"scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${local_file.private_key.filename} ubuntu@${aws_instance.OpenVPN_Server.public_ip}:/home/ubuntu/${local.openvpn_user}.ovpn ./${local.openvpn_user}.ovpn\"\n}\n\n# Clean up the .ovpn file after destroy\nprovisioner \"local-exec\" {\n    when    = destroy\n    command = \"rm -f ./${self.triggers.ovpn_file}\"\n}\n}\n</code></pre> <p>The <code>ovpn.tf</code> file manages the retrieval of the OpenVPN configuration file from the remote VPN server and donwloads it in the terraform working directory. The main purpose of this file is to ensure you get the OpenVPN client configuration file automatically downloaded to your local machine once it's ready on the server.</p> <p>Here\u2019s a breakdown of each section of this file:</p> <p>Resource Definition</p> <ul> <li><code>null_resource \"get_ovpn_config\"</code>: A helper resource used to wait for the OpenVPN configuration file to be generated, then download it locally. This resource doesn't create infrastructure directly but adds automation to the deployment process.</li> </ul> <p>Dependency and Trigger Configuration</p> <ul> <li><code>depends_on = [aws_instance.OpenVPN_Server]</code>: Ensures this resource executes only after the OpenVPN server instance is successfully created.</li> <li><code>triggers</code>:  </li> <li><code>instance_ip</code>: Ensures the resource is re-applied if the public IP of the OpenVPN server changes.  </li> <li><code>ovpn_file</code>: Tracks the expected <code>.ovpn</code> configuration filename as a trigger, ensuring changes to this filename will trigger re-execution.</li> </ul> <p>Remote Execution Provisioner</p> <ul> <li><code>provisioner \"remote-exec\"</code>: Executes commands on the OpenVPN server to ensure the <code>.ovpn</code> configuration file is ready.  </li> </ul> <p><code>inline</code>: </p> <p>Contains the commands to:</p> <ul> <li><code>while [ ! -f /home/ubuntu/... ]; do</code>: Polls the server every 20 seconds, checking if the <code>.ovpn</code> file exists.  </li> <li><code>echo 'Waiting for OpenVPN config file...'</code>: Prints a message during the wait loop.  </li> <li><code>echo 'OpenVPN config file is ready!'</code>: Signals the file is available.  </li> </ul> <p><code>connection</code>: Defines SSH connection details:</p> <ul> <li><code>type</code>: Specifies SSH as the connection type.  </li> <li><code>user</code>: Specifies the user (<code>ubuntu</code>) to connect with.  </li> <li><code>private_key</code>: Uses the private key generated earlier for authentication.  </li> <li><code>host</code>: Specifies the public IP of the OpenVPN server instance.</li> </ul> <p>Local Execution Provisioner</p> <ul> <li>First <code>local-exec</code> block: Downloads the <code>.ovpn</code> file to the local machine.  </li> <li><code>scp</code>: Securely copies the file from the OpenVPN server to the local directory.  </li> </ul> <p>Options:</p> <ul> <li><code>-o StrictHostKeyChecking=no</code>: Disables host key checking to avoid interactive prompts.  </li> <li><code>-o UserKnownHostsFile=/dev/null</code>: Prevents updates to the local known hosts file.  </li> <li><code>-i</code>: Specifies the SSH private key for authentication.  </li> </ul> <p>Cleanup on Resource Destruction</p> <ul> <li>Second <code>local-exec</code> block: Deletes the downloaded <code>*.ovpn</code> file when the resource is destroyed during the terraform cleanup phase.  </li> <li><code>when = destroy</code>: Ensures the command is only executed during the resource destruction phase.  </li> <li><code>rm -f ./${self.triggers.ovpn_file}</code>: Removes the file using the name stored in the triggers.</li> </ul> <p>Overall Function</p> <p>This file ensures that the OpenVPN profile configuration file is created on the server, securely downloads it to the local system, and removes it when no longer needed (when the <code>terraform destroy</code> command is run). It integrates waiting, remote command execution, and local file operations seamlessly within the Terraform workflow.</p> The <code>provider.tf</code> file provider.tf <pre><code># \nterraform {\nrequired_providers {\n    aws = {\n    source  = \"hashicorp/aws\"\n    version = \"~&gt; 5.0\"\n    }\n    local = {\n    source  = \"hashicorp/local\"\n    version = \"~&gt; 2.0\"\n    }\n    tls = {\n    source  = \"hashicorp/tls\"\n    version = \"~&gt; 4.0\"\n    }\n    null = {\n    source  = \"hashicorp/null\"\n    version = \"~&gt; 3.0\"\n    }\n}\nrequired_version = \"&gt;= 1.2.0\"\n}\n\n# Configure the AWS Provider\nprovider \"aws\" {\nregion = \"${var.selected_region}\"\n}\n</code></pre> <p>The file essentially sets up the foundational configuration sources and versions needed for Terraform to interact with AWS and to use other necessary providers for the OpenVPN deployment. </p> The <code>securityGrp.tf</code> file securityGrp.tf <pre><code># OpenVPN Server Security Group\nresource \"aws_security_group\" \"openvpn_SG\" {\nname_prefix = \"${var.project_name}_openvpn_SG_\"\ndescription = \"OpeyemiTechPro OpenVPN Security Group\"\n\ndynamic \"ingress\" {\n    for_each = var.openvpn_tcp_ports\n    content {\n    from_port   = ingress.key\n    to_port     = ingress.key\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = ingress.value\n    }\n}\n\ndynamic \"ingress\" {\n    for_each = var.openvpn_udp_ports\n    content {\n    from_port   = ingress.key\n    to_port     = ingress.key\n    protocol    = \"udp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = ingress.value\n    }\n}  \n\negress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n}\n}\n</code></pre> <p>This configures the required security group profile for the OpenVPN server. It opens the required ports for ingress and egress and the neccesary port protocols (tcp and udp).</p> <p>The sections of the securityGrp.tf file are explained breifly below:</p> <p>Resource Definition</p> <ul> <li><code>resource \"aws_security_group\" \"openvpn_SG\"</code>: Creates a security group in AWS to define network access rules for the OpenVPN server.</li> </ul> <p>Security Group Naming and Description</p> <ul> <li><code>name_prefix</code>: Sets a prefix for the security group name, combining the project name (<code>var.project_name</code>) with <code>_openvpn_SG_</code>. AWS appends a unique identifier to the prefix.</li> <li><code>description</code>: Provides a description for the security group, indicating its purpose (OpenVPN security).</li> </ul> <p>Dynamic Ingress Rules for TCP Ports</p> <p><code>dynamic \"ingress\"</code> (first block):</p> <ul> <li><code>for_each = var.openvpn_tcp_ports</code>: Iterates over a map of TCP ports and descriptions provided in the variable <code>var.openvpn_tcp_ports</code>.</li> </ul> <p><code>content {}</code>: Defines the content of each rule:</p> <ul> <li><code>from_port</code> and <code>to_port</code>: Sets the port range for the rule, using the key from the iteration (<code>ingress.key</code>).</li> <li><code>protocol = \"tcp\"</code>: Specifies that the rule applies to TCP traffic.</li> <li><code>cidr_blocks = [\"0.0.0.0/0\"]</code>: Allows traffic from all IP addresses.</li> <li><code>description = ingress.value</code>: Provides a description for the rule, using the value from the iteration.</li> </ul> <p>Dynamic Ingress Rules for UDP Ports</p> <p><code>dynamic \"ingress\"</code> (second block):</p> <ul> <li>Similar to the first block, but applies to UDP traffic.</li> <li>Iterates over the variable <code>var.openvpn_udp_ports</code>, which contains a map of UDP ports and their descriptions.</li> </ul> <p>Egress Rules</p> <p><code>egress</code> block:</p> <ul> <li><code>from_port = 0</code> and <code>to_port = 0</code>: Allows all outbound traffic across all port ranges.</li> <li><code>protocol = \"-1\"</code>: Applies the rule to all protocols.</li> <li><code>cidr_blocks = [\"0.0.0.0/0\"]</code>: Allows traffic to all IP addresses.</li> </ul> <p>Overall Function</p> <p>This security group:</p> <ol> <li>Dynamically creates ingress (inbound) rules for both TCP and UDP traffic based on user-defined ports and descriptions (<code>var.openvpn_tcp_ports</code> and <code>var.openvpn_udp_ports</code>).</li> <li>Configures unrestricted egress (outbound) traffic to allow the OpenVPN server to communicate with any destination.</li> <li>Ensures that all rules are flexible and easy to manage via Terraform variables, making it adaptable for different use cases.</li> </ol> The <code>terraform.tfvars</code> file terraform.tfvars <pre><code># Project Details\nproject_name = \"Opeyemi_OpenVPN_YT\"\n\n\n# Variables for OpenVPN Server\nOpenVPN_instance_type = \"t2.micro\"\n\n# OpenVPN Server port Details\nopenvpn_tcp_ports = {\n\"22\" = \"SSH Access\"\n\"80\"  = \"HTTP Access\"\n\"443\" = \"HTTPS Access\" \n\"943\" = \"OpenVPN Management Port\"\n}\n\nopenvpn_udp_ports = {\n\"1194\" = \"OpenVPN udp Port\"\n}\n</code></pre> <p>Here, values are assigned to all the declared variables in the config script.  You can freely change any values here to customize the script for your own purpose</p> The <code>variables.tf</code> file variables.tf <pre><code>variable \"project_name\" {\ndescription = \"Title of the Project\"\ntype        = string\n}\n\nvariable \"OpenVPN_instance_type\" {\ndescription = \"The type of EC2 instance to launch for the OpenVPN Server\"\ntype        = string\n}\nvariable \"openvpn_tcp_ports\" {\ntype = map(string)\ndescription = \"Map of OpenVPN ports to their descriptions\"\n}\n\nvariable \"openvpn_udp_ports\" {\ntype = map(string)\ndescription = \"Map of OpenVPN UDP ports to their descriptions\"\n}\n\nvariable \"aws_regions\" {\ntype = map(string)\ndefault = {\n    \"us-east-1\"      = \"N. Virginia\"\n    \"us-east-2\"      = \"Ohio\"\n    \"us-west-1\"      = \"N. California\"\n    \"us-west-2\"      = \"Oregon\"\n    \"af-south-1\"     = \"Cape Town\"\n    \"ap-east-1\"      = \"Hong Kong\"\n    \"ap-south-1\"     = \"Mumbai\"\n    \"ap-southeast-1\" = \"Singapore\"\n    \"ap-southeast-2\" = \"Sydney\"\n    \"ap-southeast-3\" = \"Jakarta\"\n    \"ap-northeast-1\" = \"Tokyo\"\n    \"ap-northeast-2\" = \"Seoul\"\n    \"ap-northeast-3\" = \"Osaka\"\n    \"ca-central-1\"   = \"Canada Central\"\n    \"ca-west-1\"      = \"Calgary\"\n    \"cn-north-1\"     = \"Beijing\"\n    \"cn-northwest-1\" = \"Ningxia\"\n    \"eu-central-1\"   = \"Frankfurt\"\n    \"eu-central-2\"   = \"Zurich\"\n    \"eu-west-1\"      = \"Ireland\"\n    \"eu-west-2\"      = \"London\"\n    \"eu-west-3\"      = \"Paris\"\n    \"eu-north-1\"     = \"Stockholm\"\n    \"eu-south-1\"     = \"Milan\"\n    \"eu-south-2\"     = \"Spain\"\n    \"me-south-1\"     = \"Bahrain\"\n    \"me-central-1\"   = \"UAE\"\n    \"sa-east-1\"      = \"S\u00e3o Paulo\"\n    \"il-central-1\"   = \"Tel Aviv\"\n}\n}\n\nvariable \"selected_region\" {\ntype        = string\ndescription = \"Enter the AWS region where you want to deploy your OpenVPN Server and press Enter:\"\n\nvalidation {\n    condition     = can(regex(\"^(eu|us|ap|ca|sa|me|af|il|cn)-(central|west|east|north|south|southeast|northeast|northwest)-[1-3]$\", var.selected_region))\n    error_message = \"Please select a valid AWS region from the provided list.\"\n}\n}\n</code></pre> <p>The <code>variables.tf</code> file is used to define variables that make the configuration more dynamic and reusable. By abstracting values into variables, I can easily customize the infrastructure without directly modifying the configuration files.</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#setting-the-script-options","title":"Setting the script options","text":"<p>The script allows you to set some options based on your use case. These are the available options you can set:</p> <ul> <li> project_name - This is used for labelling purposes only. It is appended to the resource tags</li> <li> OpenVPN_instance_type - This has been set to <code>t2-micro</code> so the setup remains within the AWS free-tier plan.  You can change this to any suitable instance type but a t2-micro will server in most situations</li> <li> openvpn_user - This is the username used to create the <code>*.ovpn</code> profile file on the VPN server. The profile name is displayed when you connect through the OpenVPN client. It is currently set to append the selected AWS region so you can easily know which region you are connected to.</li> <li> selected_region - this option is set at runtime and it is required for the script to run. Here you select the AWS region where you want your server to be hosted.  The region you select will determine where your VPN traffic is routed through. For example, if you select <code>ca-central-1</code>, your VPN traffic will be routed through the AWS Canada Central IP address and as such your public IP address will read \"Quebec, Montreal, Canada\" </li> </ul> <p></p> <p>Public IP address showing Canada</p> <p>The list of acceptable AWS regions are shown here</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#running-the-script","title":"Running the script","text":"<p>Follow the \"Quick Start Guide\" below to provision and configure your OpenVPN server and to connect to your new VPN network.</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#quick-start-guide","title":"Quick Start Guide","text":"Click here for a quick start guide on setting up the OpenVPN Access Server","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#clone-the-repository","title":"Clone the Repository","text":"<p>Create a folder on your local machine and clone the repository in the folder</p> <pre><code>git clone https://github.com/opeyemitechpro/OpenVPN-Terraform.git\n</code></pre>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#initialize-the-terraform-configuration","title":"Initialize the terraform configuration","text":"<p>From within the cloned directory, initialize the terraform configuration</p> <pre><code>terraform init\n</code></pre> <p></p> <p>Terraform Initialiaztion Command</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#apply-the-terraform-configuration","title":"Apply the Terraform Configuration","text":"<pre><code>terraform apply -auto-approve\n</code></pre> <ul> <li>When prompted, enter an AWS region from the list below and press enter.  (e.g. <code>us-west-2</code>)</li> <li>This will be the AWS region where the VPN server and all resources will be hosted. </li> </ul> <p>Terraform apply command</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#list-of-accepted-aws-regions","title":"List of accepted AWS regions","text":"<ul> <li>us-east-1       =  N. Virginia </li> <li>us-east-2       =  Ohio </li> <li>us-west-1       =  N. California </li> <li>us-west-2       =  Oregon </li> <li>af-south-1      =  Cape Town </li> <li>ap-east-1       =  Hong Kong </li> <li>ap-south-1      =  Mumbai </li> <li>ap-southeast-1  =  Singapore </li> <li>ap-southeast-2  =  Sydney </li> <li>ap-southeast-3  =  Jakarta </li> <li>ap-northeast-1  =  Tokyo </li> <li>ap-northeast-2  =  Seoul </li> <li>ap-northeast-3  =  Osaka </li> <li>ca-central-1    =  Canada Central </li> <li>eu-central-1    =  Frankfurt </li> <li>eu-west-1       =  Ireland </li> <li>eu-west-2       =  London </li> <li>eu-west-3       =  Paris </li> <li>eu-north-1      =  Stockholm </li> <li>eu-south-1      =  Milan </li> <li>eu-south-2      =  Zurich </li> <li>me-south-1      =  Bahrain </li> <li>me-central-1    =  UAE </li> <li>sa-east-1       =  S\u00e3o Paulo </li> </ul>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#outputs","title":"Outputs","text":"<p>At the end of the terraform apply command, the script outputs the following details on the screen:</p> <ul> <li>The Public IP address of the VPN Server</li> <li>The instance-ID</li> <li>The name of the keypair created</li> <li>The path where the private key file was saved on your local machine</li> <li>SSH connection string that you can use to the VPN server</li> <li>The OpenVPN profile file that you will use to ssh into the VPN server</li> <li>Further steps to launch your VPN connection</li> </ul> <p></p> <p>Terraform Output Screen</p> <p>Showing the OpenVPN server on the AWS EC2 Console </p> <p>AWS Console Showing the OpenVPN Server details</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#connect-to-your-vpn","title":"Connect to your VPN","text":"<ul> <li>Download and install OpenVPN Connect client on your local machine</li> <li>Import the <code>*.ovpn</code> file into the OpenVPN cient appllication</li> <li>Connect to your VPN network</li> </ul> <p>OpenVPN Client Connected to the VPN</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#testing-your-vpn-connection","title":"Testing your VPN Connection","text":"<p>One very simple way to check if you are actually connected to your new VPN network is to open your browser and check your public IP address. You can use websites like whatsmyip.com or simply search \"what is my ip address\" on Google to check your public IP address.  </p> <p></p> <p>Public IP address showing Canada</p> <p>When you are connected to your VPN server, your internet traffic will be routed through your VPN server and as such, only your VPN server IP address will be seen publicly, your local ISP assigned ip address will be hidden from the internet. </p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#cleanup","title":"Cleanup","text":"<p>To delete the server and cleanup all resources that were created.</p> <ol> <li> <p>First disconnect the OpenVPN Connect Client</p> </li> <li> <p>Then enter the command below to delete all locally created files and also delete the server and all other resources from your AWS account.  </p> </li> </ol> <pre><code>terraform destroy -auto-approve \n</code></pre> <ul> <li>This will terminate the EC2 instance and delete all resources created and also delete the files that were locally created in the terraform working directory i.e. the *.ovpn user profile and the keypair file that was created earlier </li> </ul> <p></p> <p>Terraform Destroy Command</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#use-cases","title":"Use Cases","text":"<p>This self-hosted OpenVPN solution offers flexibility, control, and enhanced security compared to commercial VPN services. Here are some possible use cases:  </p> <p>1. Secure Remote Access - Corporate Network Access: Allow employees to securely connect to on-premises resources or internal systems. - Remote Development: Enable developers to work on private servers or cloud environments without exposing them to the public internet.  </p> <p>2. Privacy and Anonymity - Encrypt Internet Traffic: Protect personal or organizational internet traffic, especially when using public Wi-Fi. - Location Masking: Access the internet as if from a specific location to bypass geolocation restrictions.  </p> <p>3. Secure Inter-Office Communication - Branch Office Connectivity: Connect multiple office locations securely over a shared network. - IoT Devices: Secure communication for IoT devices spread across different sites.  </p> <p>4. Personal Use - Ad-Free Browsing: Avoid invasive tracking and ads by routing traffic through your onw self-hosted VPN server. - Bypass ISP Throttling: Prevent internet service providers from throttling bandwidth for specific services.  </p> <p>5. Development and Testing - Environment Testing: Simulate network environments for application development and QA testing. - Access Restricted APIs: Connect securely to APIs or other restricted services during development.  </p> <p>6. Secure Cloud Resources - Private Cloud Access: Connect securely to AWS resources without exposing them to the public internet. - DevOps Pipelines: Ensure secure deployment pipelines that require private network connectivity.  </p> <p>7. Enhanced Security - Multi-Layered Security: Combine a self-hosted VPN with firewalls or IDS/IPS systems to add another layer of protection. - Self-Controlled Data: Prevent third-party logging or tracking of your internet activity.  </p> <p>8. Education and Research - Bypass Censorship: Enable access to academic resources or restricted sites in regions with strict censorship. - Research Anonymity: Conduct secure and private research online.  </p> <p>9. Cost Efficiency - Avoiding Commercial VPN Costs: Reduce long-term expenses for secure connections, especially for teams or organizations. - No User Limits: Create a solution tailored to your usage, avoiding per-user or bandwidth fees common with commercial VPNs.  </p> <p>10. Gaming and Media - LAN Gaming: Create a virtual local area network for multiplayer gaming. - Bypass Regional Blocks: Access region-restricted content like streaming services.  </p> <p>By usign this solution to host your own VPN, you gain complete control over configuration, logs, and data flow, making it an excellent choice for your specific use case.</p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"terraform_projects/openvpn_access_server/#conclusion","title":"Conclusion","text":"<p>Setting up a self-hosted VPN server using this Terraform configuration script is a straightforward and efficient way to enhance your network security and maintain control over your data. By following this documentation, you can deploy a robust OpenVPN server on AWS, customize it to your needs, and ensure private and secure internet access. This guide aims to empower you with the knowledge and tools to manage your own VPN server effectively. For any troubleshooting or further customization, explore the Terraform and OpenVPN documentation for advanced insights and solutions. </p>","tags":["AWS","Terraform","OpenVPN"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/aws/","title":"AWS","text":""},{"location":"blog/category/blog/","title":"Blog","text":""}]}